{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jiwon Nam \uac8c\uc784 \uac1c\ubc1c\ud558\ub824\uace0 \ucef4\uacf5 \uc9c4\ud559\ud55c \ubb34\ubaa8\ud55c \uc778\uac04. (\uc8fc\uad00\uc2ec\uc0ac\ub294 \uadf8\ub798\ud53d\uc2a4, \uac8c\uc784 \uc5d4\uc9c4 \uc544\ud0a4\ud14d\ucc98\uc600\ub354\ub7ac\uc8e0...) Skills Programming Language : C/C++ << Major Python Tools : Visual Studio VS Code Git / GitHub Language : English (OPIC - IM2) Education \uc778\ucc9c\ub300\ud559\uad50 \ucef4\ud4e8\ud130\uacf5\ud559\ubd80 (17.03 ~ 23.08) \uc878\uc5c5 \ud504\ub85c\uc81d\ud2b8(AR, \ud578\ub4dc \ud2b8\ub798\ud0b9, \uc774\ubbf8\uc9c0 \uc778\uc2dd) Projects Penitence (C++ ECS Project) White ashes (OpenGL Graphics) Awards & Activities \ucea1\uc2a4\ud1a4 \ub514\uc790\uc778 \ubc1c\ud45c \uae08\uc0c1 \uc218\uc0c1 (22.05) Contact blckhnd.std@gmail.com GitHub","title":"Intro"},{"location":"#jiwon-nam","text":"\uac8c\uc784 \uac1c\ubc1c\ud558\ub824\uace0 \ucef4\uacf5 \uc9c4\ud559\ud55c \ubb34\ubaa8\ud55c \uc778\uac04. (\uc8fc\uad00\uc2ec\uc0ac\ub294 \uadf8\ub798\ud53d\uc2a4, \uac8c\uc784 \uc5d4\uc9c4 \uc544\ud0a4\ud14d\ucc98\uc600\ub354\ub7ac\uc8e0...)","title":"Jiwon Nam"},{"location":"#skills","text":"Programming Language : C/C++ << Major Python Tools : Visual Studio VS Code Git / GitHub Language : English (OPIC - IM2)","title":"Skills"},{"location":"#education","text":"\uc778\ucc9c\ub300\ud559\uad50 \ucef4\ud4e8\ud130\uacf5\ud559\ubd80 (17.03 ~ 23.08) \uc878\uc5c5 \ud504\ub85c\uc81d\ud2b8(AR, \ud578\ub4dc \ud2b8\ub798\ud0b9, \uc774\ubbf8\uc9c0 \uc778\uc2dd)","title":"Education"},{"location":"#projects","text":"Penitence (C++ ECS Project) White ashes (OpenGL Graphics)","title":"Projects"},{"location":"#awards-activities","text":"\ucea1\uc2a4\ud1a4 \ub514\uc790\uc778 \ubc1c\ud45c \uae08\uc0c1 \uc218\uc0c1 (22.05)","title":"Awards &amp; Activities"},{"location":"#contact","text":"blckhnd.std@gmail.com GitHub","title":"Contact"},{"location":"posts/2024-12-12/","text":"ECS \uc544\ud0a4\ud14d\ucc98 \ud328\ud134 (\ub0b4 \uac8c\uc784, Penitence\ub97c \ub54c\ub824\uce5c \uc774\uc720) \uccab \uae00\uc744 \ubb58\ub85c \ud560\uae4c \ud558\ub2e4\uac00, \ub0b4\uac00 \ucd5c\uadfc\uc5d0 \ucc0d\uba39\ud574\ubcf8 \uad6c\uc870\uc5d0 \ub300\ud574 \ub9d0\ud574\ubcf4\uace0\uc790 \ud55c\ub2e4. \uc74c\uc74c. \ubc14\ub85c Entity-Component-System(\uc904\uc5ec\uc11c, ECS) \uc774\ub2e4. 1. \uc5b4\uca4c\ub2e4...\uc54c\uac8c \ub410\ub294\uc9c0 \uc62c\ud574 \ucd08\uc5d0 Rust \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 Bevy\uc5d4\uc9c4 \uc18c\uac1c \uc601\uc0c1\uc744 \ubd24\ub2e4. Bevy\ub294 \ud2b9\uc774\ud558\uac8c \uc804\ud615\uc801\uc778 OOP \uad6c\uc870(Game Object, Actor...)\ub97c \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. ECS\uc758 \ub4f1\uc7a5\uc774\uc5c8\ub2e4. \uc790, ECS\ub294 \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \ub3d9\uc791\ud558\ub294\uac00? \uc6b0\uc120 \uc774\ub97c \uc54c\uc544\ubcf4\uae30 \uc704\ud574 \ub370\uc774\ud130 \uc5d0 \ub300\ud574 \uba3c\uc800 \uc54c\uc544\ubcfc \ud544\uc694\uac00 \uc788\ub2e4. 2. \ub370\uc774\ud130 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d (Data Oriented Programming) \uba38\ub9bf \uc18d\uc73c\ub85c \uc544\ubb34 \uac1d\uccb4(Object)\ub098 \ub5a0\uc62c\ub824 \ubcf4\ub77c. OOP\uc758 \uc775\uc219\ud55c \uac1c\ubc1c\uc790\ub4e4\uc740 \ubb50, \uace0\uc591\uc774, \uac15\uc544\uc9c0, \ub3c4\ub0a0\ub4dc \ud2b8\ub7fc\ud504 \ub4f1\ub4f1 \uc5ec\ub7ec \uac1d\uccb4\ub97c \uc0dd\uac01\ud574\ub0c8\uc744 \uac83\uc774\ub2e4. \ubb50, \uadf8\ub0e5 \uc0ac\ub78c\uc744 \uac1d\uccb4\ub85c \ub098\ud0c0\ub0b8\ub2e4 \uce58\uc790. (\uc774\ud558 \ubaa8\ub4e0 \uc608\uc2dc \ucf54\ub4dc\ub294 \ub0b4\uac00 C++ \uac1c\ubc1c\uc790\ub2c8 \uadf8\ub807\uac8c \ub410\ub2e4 \u3147\u3147) #include <iostream> #include <string> class Person { public: // \uc5ec\ub7ec \uc0dd\uc131\uc790\ub4e4... // \ubcf5\uc0ac / \uc774\ub3d9 / \ud560\ub2f9 \uc5f0\uc0b0\uc790... // \uadf8\ub9ac\uace0 \ubb50 \ub610 \uc774\uc0c1\ud55c \uac8c\ud130 \uc138\ud130 \uc5b4\uca4c\uad6c \uc800\uca4c\uad6c... void Walk() // \uadf8\ub0e5 \uac77\ub294 \ud568\uc218 { std::cout << name << \"is walking\" << std::endl; } protected: std::string name; // \uc774\ub984 float height; // \uc2e0\uc7a5 float weight; // \ubab8\ubb34\uac8c }; \ud604\uc7ac \uc0ac\ub78c \uac1d\uccb4\uc758 \uba64\ubc84\ub294 name, height, weight\uc774\ub2e4. \uac01\uac01\uc758 \uc790\ub8cc\ud615\uc740 8\ubc14\uc774\ud2b8 \ubb38\uc790\uc5f4\uacfc 4\ubc14\uc774\ud2b8 \ubd80\ub3d9\uc18c\uc218\uc810 \uc18c\uc218 \ub450\uac1c. \ub9cc\uc57d\uc5d0 \ubb34\uc2a8, \uad70 \uc7a5\ubcd1 \uad00\ub9ac \ubca1\ud130\ub97c \ub9cc\ub4e4\uc5b4 \uc21c\ud68c\ud55c\ub2e4 \uac00\uc815\ud574\ubcf4\uc790. std::vector<Person> soldiers; for(const auto& soldier : soldiers) soldier.Walk(); \uadf8\ub7fc \uc774 \ubca1\ud130\ub294, \uad6c\uc870\uccb4\uc758 \ubc30\uc5f4 (Array Of Structure)\uc774 \ub41c\ub2e4. \uc774\uac8c \ubb38\uc81c\ub2e4. \uc76d? \uad1c\ucc2e\uc740\uac70 \uc544\ub2cc\uac00\uc694? \ubb50\uac00 \ubb38\uc81c\uc8e0? \ub77c\uace0 \ubb3b\ub294\ub2e4\uba74, \ubb3c\ub860 \uac1c\ubc1c\ud560\ub550, \ud3b8\ud558\uaca0\uc9c0. \uadf8\uac83\uc774 OOP\uc758 \ubaa9\uc801\uc774\ub2c8\uae4c\uc789. \ud558\uc9c0\ub9cc \uc804\uacf5\uc790\ub77c\uba74 \ucef4\ud4e8\ud130\uad6c\uc870 \uc2dc\uac04\uc5d0 \ub4e4\uc5b4\ubd24\uc744\ubc95\ud55c \ub140\uc11d\uc774 \ub4f1\uc7a5\ud55c\ub2e4\uba74 \uc598\uae30\uac00 \ub2ec\ub77c\uc9c4\ub2e4! \uadf8\uac83\uc740 \ubc14\ub85c \uce90\uc2dc(Cache)\ub2e4. \uadf8\ub0e5, \uc26c\uc6b4 \uc598\uc2dc\ub97c \ub4e4\uc5b4\ubcf4\uc790. \ub2f9\uc2e0\uc740 \uc9c0\uae08\ubd80\ud130 \ub3c4\uc11c\uad00 \uc0ac\uc11c\uc784. \uadfc\ub370, \ucc45\ub4e4\uc774 \uc8fc\uc81c, \ucd08\uc131, \ucd9c\uac04 \ub0a0\uc9dc \uc0c1\uad00\uc5c6\uc774 \uc544\ubb34\ub370\ub098 \ub9c9 \uaf42\ud600 \uc788\uc74c. \uadc0\ucc2e\uc544 \uc8fd\uace0 \uc2f6\uc744\uac70 \uc544\ub2cc\uac00? \uc5ec\uae30\uc11c \uc911\uc694\ud55c \uac74, \uac10\uc815\uc774 \uc544\ub2c8\ub77c \uc774\uc720\ub2e4. \uadf8 \uadc0\ucc2e\uc74c\uc73c\ub85c \uc778\ud55c \uc790\uac00 \uc18c\uba78 \uc695\uad6c\uac00 \uc5b4\ub514\uc11c \uae30\uc778\ud558\ub294\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4. \ucc45\uc774 \uc788\ub294 \uc704\uce58\uac00 \uc9c0 \ub9f4\ub300\ub85c\ub77c\uba74 \uc65c \ud798\ub4e4\uc5b4\uc9c8\uae4c. \uc815\ub2f5\uc740, \uac81\ub098 \uc654\ub2e4\ub9ac\uac14\ub2e4\ub9ac \ud574\uc57c\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub0b4\uac00 \uc0dd\uac01\ud558\uae30\uc5d4, S\ucc45\uc740 \uc800\ucabd\uc5d0 \uc788\uc5b4. -> \uc544, \uc544\ub2c8\uc5c8\ub124. \uc800\uae34\uac00. -> \ub610 \uc544\ub2c8\ub124. \uc345. \uc774\ub807\uac8c \ub41c\ub2e4\ub294 \uac70\ub2e4. \uc774\ub7f0 \uc0c1\ud669\uc744 \uce90\uc2dc\ub3c4 \uacaa\ub294\ub370, \uc774\ub97c \uce90\uc2dc \ubbf8\uc2a4 \ub77c \ud55c\ub2e8\ub2e4. \uadf8\ub9ac\uace0 \uc870\uae08\uc774\ub77c\ub3c4 \uc9c0\ub2a5\uc774 \uc788\ub294 \uc0ac\ub78c\uc774\ub77c\uba74 \uc808\ub300 \uc774\ub807\uac8c \uad00\ub9ac\ud558\uc9c0 \uc54a\uc744\uac70\ub2e4. \ucd5c\uc18c\ud55c, \ucc45\uc774 \uc5b4\ub5a4 \ubd84\uc57c\uc758 \uc11c\uc801\uc778\uc9c0 \uc815\ub3c4\ub294...\ucf54\ud305\ud574\uc11c \uc55e\uc7a5\uc5d0\ub2e4 \ubd88\ud788\uc9c0 \uc54a\uaca0\ub098. \uadfc\ub370, \uce90\uc2dc\ub3c4 \ub611\uac19\ub2e4. \uc798 \uc0dd\uac01\ud574\ubcf4\ub77c. \ucef4\ud4e8\ud130 \ud558\ub4dc\uc6e8\uc5b4\uc5d0\uc11c DATA \ub294 \uacb0\uad6d \uba54\ubaa8\ub9ac \uacf5\uac04\uc774\ub2e4. Person \uac1d\uccb4\uc758 \uba54\ubaa8\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ubaa8\ub378\ub9c1 \uac00\ub2a5\ud558\ub2e4. Person name(8 byte) height(4 byte) weight(4 byte) \uc790, \uc774\uc81c soldiers \ubca1\ud130\ub97c \uc21c\ud68c\ud55c\ub2e4 \uc0dd\uac01\ud574\ubcf4\uc790. \ud3ec\uc778\ud130\uac00 \ucc98\uc74c\uc5d0\ub294 8\ubc14\uc774\ud2b8\uc9dc\ub9ac name\uc744 \uac00\ub9ac\ud0a4\uace0 \uc21c\uc11c\ub300\ub85c height, weight\ub97c \uac00\ub9ac\ud0ac \uac83\uc774\ub2e4. \ud3ec\uc778\ud130\ub294 \uc5b4\ub5a8\ub54c\uc5d0\ub294 8\ubc14\uc774\ud2b8\ub97c \uc6c0\uc9c1\uc5ec\uc57c \ud558\uace0 \uc5b4\ub5a8 \ub54c\ub294 4\ubc14\uc774\ud2b8\ub97c \uc6c0\uc9c1\uc5ec\uc57c \ud55c\ub2e4. \uc790, \uc774\ub7ec\ud55c \ubc29\uc2dd \ub54c\ubb38\uc5d0 \uba54\ubaa8\ub9ac \ucc38\uc870\uc5d0 \uc0dd\uac01\ubcf4\ub2e4 \ub9ce\uc740 (\uc815\ub9d0\uc774\ub2e4.) \ub9ac\uc18c\uc2a4\uac00 \ub0ad\ube44\ub41c\ub2e4. \uadf8\ub7fc \uc5b4\ub5bb\uac8c \ud574\uc57c\ud568? \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc88b\uc740 \ubc29\ubc95 \uc911 \ud558\ub098\ub294, \uac1d\uccb4 \uc548\uc5d0 \uc788\ub294 \ub370\uc774\ud130\uc640 \ub85c\uc9c1\uc744 \ubd84\ub9ac\ud558\ub294 \uac83\uc774\ub2e4. \uc74c...\uc6d0\ub798 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \ub9cc\ub4e4\uc5b4 \ubcf4\uc790. #include <iostream> #include <string> // \ud074\ub798\uc2a4 \ub300\uc2e0 \uc54c\uae30 \uc27d\uac8c \ub124\uc784 \uc2a4\ud398\uc774\uc2a4 namespace Person { std::string name; float height; float weight; void Walk(const Person::name& _name) { std::cout << _name << \"is walking\" << std::endl; } }; std::vector<Person::name> soldiers; // \uc21c\ud68c for(const auto& name : soldiers) Person::Walk(name); \"\uc5b4? \uadf8\ub7fc \uc2e0\uc7a5\uc774\ub098 \ubab8\ubb34\uac8c\ub97c \uc21c\ud68c\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud558\ub098\uc694?\" \uadf8 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. #include <unordered_map> std::unordered_map<Person::name, Person::height> soldier_heights; void PrintHeight(float _h) { std::cout << _h << std::endl; } // \uc21c\ud68c for(const auto& name : soldiers) PrintHeight(soldier_heights[name]); \uae09\uc870\ud55c \ucf54\ub4dc\ub77c\uc11c \uc880...\ubcd1\uc2e0\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc, \ud575\uc2ec \uc544\uc774\ub514\uc5b4\ub294 \uc774\uac70\ub2e4! \uc774\ub7f0\uc2dd\uc73c\ub85c \ub370\uc774\ud130\uc640 \ub85c\uc9c1\uc744 \uac1d\uccb4\ub77c\ub294 \uac10\uc625\ud574\uc11c \ud574\ubc29\uc2dc\ud0a4\ub294 \uac83\uc774\ub2e4! \uadf8\ub9ac\uace0 \uc774\ub807\uac8c \ubc30\uc5f4\uc758 \uad6c\uc870\uccb4(Structure Of Arrays)\ub85c \ub9cc\ub4dc\ub294\uac8c, \ub370\uc774\ud130 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d, \ub370\uc774\ud130 \uc9c0\ud5a5 \uc124\uacc4\uc774\ub2e4. 3. \uadf8\ub798\uc11c ECS\uac00 \ubb50\uc784 \uc74c...\uc6b0\uc120 \uc704\uc5d0\uc11c soldiers \ubca1\ud130\ub97c \uc21c\ud68c\ud588\uc744\ub54c, Person::name\uc73c\ub85c \uc21c\ud68c\ud588\ub358 \uac83\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc14\uafd4\ubcf4\uc790. #include <string> #include <vector> #include <unordered_map> namespace Entity { using id = int; } namespace Component { using name = std::string; using height = float; using weight = float; }; namespace System { auto walk = [&](Entity::id _id) { std::cout << names[_id] << \"is walking\\n\"; }; std::unordered_map<Entity::id, Component::name> names; } int main() { std::vector<Entity::id> soldiers; // \ub300\ucda9 \uc5d4\ud2f0\ud2f0 \ucd08\uae30\ud654 \ucf54\ub4dc ~~~ for(const int id : soldiers) System::walk(id); } \uc704 \ucf54\ub4dc\ub97c \ubcf4\uc558\uc744\ub54c, Person \uac1d\uccb4\uc758 \ud754\uc801\uc774 \ubcf4\uc774\ub294\uac00? \uc6b0\ub9ac\ucc98\ub7fc Person\uc744 \uc218\uc815\ud588\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc544\ub294 \uac83\uc774 \uc544\ub2c8\ub77c\uba74, \uc544\ub9c8 \ucc3e\uae30\uc5d0 \uc5b4\ub824\uc6b8 \uac83\uc774\ub2e4. \ucf54\ub4dc\uc5d0 \uc774\ubbf8 \ud78c\ud2b8\uac00 \ub098\uc640\uc788\ub2e4. Entity\ub780, \ud2b9\uc815 \ub370\uc774\ud130\ub97c \uc2dd\ubcc4\ud560 \uc218 \uc788\ub294 \ucd5c\uc18c\ud55c\uc758 ID\uc774\ub2e4. \ub098\ub294 \uc704 \ucf54\ub4dc\uc5d0\uc11c int\ub85c id\ub97c \ud45c\ud604\ud588\ub2e4. \uc2ac\uc2ac, \uc5d4\uc9c4\ubd80\ud130 \uc2dc\uc791\ud574 \uac1c\ubc1c \ubaa8\ub4e0 \ubd80\ubd84\uc744 \ud568\uaed8 \ud558\ub824 \ud588\ub358 \ub098\uc758 \uc131\uc7a5 \ud504\ub85c\uc81d\ud2b8, 'Penitence'\uc5d0 \ub300\ud574 \ub9d0\ud560 \uc218 \uc788\uac8c \ub41c\uac70 \uac19\ub2e4. (\ud504\ub85c\uc81d\ud2b8 \ub9c1\ud06c) \ucc38\uace0\ub85c, Penitence\uc5d0\uc11c\ub294 Entity\uac00 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\uac00 \ub418\uc5b4\uc788\ub2e4. #include <cstdint> namespace MIR // \uc5d4\uc9c4 \uc774\ub984 { namespace ECS // ECS \uc544\ud0a4\ud14d\ucc98\uc640 \uad00\ub828\ub41c \uadf8\ub8f9 { struct Entity // \uc0ac\uc2e4 \uc774\ub984\uacf5\uac04\uc73c\ub85c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc558\uc744\ub4ef... { using ID = uint16_t; }; } } Component\ub780, \ub370\uc774\ud130\ub2e4. \uc790, DOP\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uc640 \ub85c\uc9c1\uc744 \ubd84\ub9ac\ud55c\ub2e4\uace0 \uc124\uba85\ud588\ub2e4. \uac70\uae30\uc11c \ub9d0\ud558\ub294 \ub370\uc774\ud130\ub97c ECS\uc5d0\uc11c\ub294 \ucef4\ud3ec\ub10c\ud2b8 \ub77c \ud55c\ub2e4. \uc0c1\uc6a9\uc5d4\uc9c4 \uac8c\uc784 \uac1c\ubc1c\uc790\ub77c\uba74 \ucef4\ud3ec\ub10c\ud2b8\uc758 \uac1c\ub150\uc5d0 \ub300\ud574\uc11c \uc798 \uc54c\uace0 \uc788\uc744\ud150\ub370, \uadf8\uac70 \ub9de\ub2e4. \uc74c...\ub9d0\uc774 \ub098\uc654\uc73c\ub2c8 \ub9d0\uc778\ub370, ECS\ub97c \uc801\uc6a9\uc2dc\ud0a8 \uac8c\uc784 \uad6c\uc870 \ud50c\ub85c\uc6b0\ub294 \ub300\ucda9 \ub2e4\uc74c\uacfc \uac19\uc774 \ud758\ub7ec\uac04\ub2e4. \uac8c\uc784 \ucd08\uae30\ud654 \uac8c\uc784 \uc5c5\ub370\uc774\ud2b8 \uac8c\uc784 \uc167\ub2e4\uc6b4 \uc5d4\ud2f0\ud2f0 ID \uc124\uc815 \ucef4\ud3ec\ub10c\ud2b8\uc5d0 \uc2dc\uc2a4\ud15c \uc801\uc6a9 \ub3d9\uc801 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \ud574\uc81c \ucef4\ud3ec\ub10c\ud2b8 \ucd08\uae30\uac12 \uc124\uc815 \uc2dc\uc2a4\ud15c\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub41c \ucef4\ud3ec\ub10c\ud2b8 \uc800\uc7a5 (\uadf8 \uc678 \uc774\uac83\uc800\uac83) \ub098 \uac19\uc740 \uacbd\uc6b0\ub294, \ucef4\ud3ec\ub10c\ud2b8 \uad6c\uc870\uac00 \ub3c5\ud2b9\ud558\ub2e4. (\ucf54\ub4dc \ub09c\ud574\ud568 \uc8fc\uc758.) // \ucef4\ud3ec\ub10c\ud2b8 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4 namespace MIR { constexpr std::uint8_t MAX_COMPONENTS = 0xFF; struct Component { using Tag = std::uint32_t; virtual ~Component() = default; }; } namespace MIR { // \ud480 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4 class PoolBase { public: virtual ~PoolBase() = default; }; // \ucef4\ud3ec\ub10c\ud2b8 \ud480 template <typename T> class ComponentPool : public PoolBase { public: static constexpr std::size_t MAX_SIZE = 0xFF; ComponentPool() = default; template <typename... Args> inline std::unique_ptr<Component, std::function<void(Component*)>> Acquire(Args&&... args) { T* component; if (pool.empty()) { // \ud480\uc5d0 \uc5ec\uc720 \ucef4\ud3ec\ub10c\ud2b8\uac00 \uc5c6\uc73c\ubbc0\ub85c \uc0c8\ub85c\uc6b4 \ucef4\ud3ec\ub10c\ud2b8 \ud560\ub2f9 component = new T(std::forward<Args>(args)...); } else { // \uae30\uc874 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc7ac\uc0ac\uc6a9 component = pool.top(); pool.pop(); // \uc0c8 \uc778\uc790\ub85c \uc7ac\ucd08\uae30\ud654 *component = T(std::forward<Args>(args)...); } // \ucee4\uc2a4\ud140 \ud574\uc81c\uc790 \uc815\uc758: unique_ptr\uc774 \ud574\uc81c\ub420 \ub54c \ud638\ucd9c\ub428 auto deleter = [this](Component* ptr) { this->Release(static_cast<T*>(ptr)); }; return std::unique_ptr<Component, std::function<void(Component*)>>(component, deleter); } private: std::stack<T*> pool; inline void Release(T* component) { if (component) { if (pool.size() < MAX_SIZE) pool.push(component); else delete component; } } }; }; \uc5ec\uae30\uae4c\uc9c0\uac00 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uad00\ub9ac\ud558\ub294 \ub0b4 \ubc29\uc2dd\uc784. Component\ub97c \uad00\ub9ac\ud560\ub54c \ud3b8\ud558\uac8c type_info, index\ub97c \uc0ac\uc6a9\ud560\uae4c \ud588\uc9c0\ub9cc, \uc5d4\ud2f0\ud2f0\ub97c ID\ub85c \uad6c\ubd84\ud588\ub358 \uac83\ucc98\ub7fc, \ube44\uc2b7\ud55c \ubc29\uc2dd\uc744 \ucc44\ud0dd. (\ub2e8, ID\ub77c\ub294 \uc774\ub984\uc740 Entity::ID\uc640 \uacb9\uccd0\uc11c \ud5f7\uac08\ub9b4 \uc218 \uc788\uae30\uc5d0, Tag\ub77c\ub294 \uc0c8\ub85c\uc6b4 \uc2dd\ubcc4\uc790\ub97c \uc815\uc758\ud568.) \ub610\ud55c, \uce90\uc2dc \uce5c\ud654\ub825\uc744 \ucd5c\ub300\ub85c \ub04c\uc5b4\uc624\uae30 \uc704\ud574 \uc2a4\ud0dd\uc744 \uc774\uc6a9\ud574\uc11c \ucef4\ud3ec\ub10c\ud2b8 \ud480\uc744 \ub9cc\ub4e6. \uc544\ub798\ub294 \ub9e4\ub2c8\uc800 \ud074\ub798\uc2a4. (\ub354 \ub09c\ud574\ud568) namespace MIR { namespace ECS { using Mask = std::bitset<MAX_COMPONENTS>; using Data = std::unordered_map<Component::Tag, std::unique_ptr<Component, std::function<void(Component*)>>>; using Pool = std::shared_ptr<PoolBase>; class Manager { public: Manager() = default; ~Manager(); Entity::ID CreateEntity(); void DestoryEntity(Entity::ID id); template <typename T, typename... Args> requires std::constructible_from<T, Args...> inline void AddComponent(Entity::ID id, Args&&... args) { if (masks.find(id) == masks.end()) throw std::runtime_error(\"Invalid Entity ID\"); Component::Tag tag = GetTag<T>(); if (masks[id][tag]) throw std::runtime_error(\"Component already exists for this Entity\"); masks[id].set(tag); if(pools.find(tag) == pools.end()) pools[tag] = std::make_shared<ComponentPool<T>>(); auto pool = std::static_pointer_cast<ComponentPool<T>>(pools[tag]); auto component = pool->Acquire(std::forward<Args>(args)...); components[id][tag] = std::move(component); } template <typename T> inline T* GetComponent(Entity::ID id) { Component::Tag tag = GetTag<T>(); if(!masks[id][tag]) return nullptr; auto it = components.find(id); if(it != components.end() && it->second.find(tag) != it->second.end()) return static_cast<T*>(it->second[tag].get()); return nullptr; } template <typename T> inline bool HasComponent(Entity::ID id) { Component::Tag tag = GetTag<T>(); return masks[id][tag]; } template <typename... Components> inline std::vector<Entity::ID> Query() const { std::vector<Entity::ID> result; for(const auto& [id, mask] : masks) if((mask.test(GetTag<Components>()) && ...)) result.emplace_back(id); return result; } private: /// \uc5d4\ud2f0\ud2f0\ubcc4 \ucef4\ud3ec\ub10c\ud2b8 \ub370\uc774\ud130\ub97c \uad00\ub9ac\ud558\ub294 \ub9f5 std::unordered_map<Entity::ID, Data> components; /// \uc5d4\ud2f0\ud2f0\ubcc4 \ucef4\ud3ec\ub10c\ud2b8 \ubcf4\uc720 \ub9c8\uc2a4\ud06c\ub97c \uad00\ub9ac\ud558\ub294 \ub9f5 std::unordered_map<Entity::ID, Mask> masks; /// \ucef4\ud3ec\ub10c\ud2b8 \ud0dc\uadf8\ubcc4 \ud480(Pool)\uc744 \uad00\ub9ac\ud558\ub294 \ub9f5 std::unordered_map<Component::Tag, Pool> pools; /// \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc5d4\ud2f0\ud2f0 ID\ub97c \uad00\ub9ac\ud558\ub294 \ud050 std::queue<Entity::ID> id_queue; /// \ub2e4\uc74c\uc5d0 \ud560\ub2f9\ud560 \uc5d4\ud2f0\ud2f0 ID inline static Entity::ID next_id = 0; /// \ub2e4\uc74c\uc5d0 \ud560\ub2f9\ud560 \ucef4\ud3ec\ub10c\ud2b8 \ud0dc\uadf8 inline static Component::Tag next_tag; inline Entity::ID GetID() { return next_id++; } template <typename T> inline static Component::Tag GetTag() { static Component::Tag tag = next_tag++; return tag; } }; } } \uc640 \uc9c0\uae08\ubd10\ub3c4 \ub108\ubb34 \uc18c\ub984\ub3cb\ub294 \ucf54\ub4dc\uc784. Mask <<<< \uc598\uac00 \ub0b4 \uc544\uc774\ub514\uc5b4\uc758 GOAT\uc784. \uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8 \uc2dc, \uc5d4\ud2f0\ud2f0\ub4e4\uc758 \uc0c1\ud0dc\ub97c \ud655\uc778\ud558\uace0 \uc21c\ud68c\ud560\ub54c Tag\ub85c \ud558\ub098 \ud558\ub098 \ucc3e\uc544\ubcf4\uac8c \ud558\ub294\uac8c \ub108\ubb34 \uc9dc\uce68... \uadf8\ub798\uc11c \ub0b4\uac00 \uc0dd\uac01\ud55c \uac83\uc911 \ud558\ub098\uac00 \ub2e4\uc74c\uacfc \uac19\ub2e4. '\ud2b9\uc815 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc5c5\ub370\uc774\ud2b8 \ub420 \uba87\uac00\uc9c0 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc5d4\ud2f0\ud2f0\uac00 '\ubb34\uc870\uac74' \uac00\uc9c0\uace0 \uc788\ub2e4 \ubcf4\uc7a5\uc2dc\ud0a4\uba74, \ubaa8\ub4e0 \uc5d4\ud2f0\ud2f0\ub97c \uac80\uc0ac\ud560 \ud544\uc694\uac00 \uc5c6\uc9c0 \uc54a\ub098?' \uadf8\ub807\uac8c, Mask\ub77c\ub294 \uad6c\uc870\ub97c \ub9cc\ub4e4\uace0, Query()\ub77c\ub294 \ud15c\ud50c\ub9bf \ud568\uc218\ub97c \ub9cc\ub4e6. Query()\uc758 \ud2b9\uc9d5\uc740 \ud30c\ub77c\ubbf8\ud130 \ud329 \ub0b4\ubd80\uc5d0 \ub4e4\uc5b4\uc628 \ubaa8\ub4e0 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uac00\uc9c0\ub294 \uc5d4\ud2f0\ud2f0 \ubca1\ud130 \ubc18\ud658\uc784. \uadf8\ub9ac\uace0 \uadf8 \uc5f0\uc0b0\uc774, \ube44\ud2b8\uc14b\uc73c\ub85c \ube60\ub974\uac8c \ub3d9\uc791\ud558\uace0, \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\ub3c4 \uc5b4\ub5a4 \uc5ed\ud560\uc744 \ud558\ub294 \ucf54\ub4dc\uc778\uc9c0 \uc27d\uac8c(?)\uc54c \uc218 \uc788\ub2e4\uace0 '\uc0dd\uac01\ud568.' \uc554\ud2bc, \uc774\uc81c \ub2e4\uc74c \ud1a0\ud53d. System\uc774\ub780, \ub85c\uc9c1\uc774\ub2e4. \uc774\ubbf8 \uc2dc\uc2a4\ud15c\uc5d0 \ub300\ud574 \ucef4\ud3ec\ub10c\ud2b8\uc5d0\uc11c \ubc18\uc808 \uc774\uc0c1 \uc124\uba85\ud55c \uac83 \uac19\ub2e4. \uadf8\ub0e5 \ucf54\ub4dc\ub97c \ubcf4\uba74\uc11c \uc774\ud574\ud574\ubcf4\uc790. namespace MIR { class System { public: System() = default; virtual ~System() = default; virtual void Update(ECS::Manager& manager, const float dt) = 0; }; } \uc5c5\ub370\uc774\ud2b8\uc5d0\uc11c \uc5d4\ud2f0\ud2f0\ub97c \uac00\uc838\uc624\uae30 \uc704\ud574 \uc758\uc874\uc131 \uc8fc\uc785\uc73c\ub85c ECS::Manager\ub97c \ud68d\ub4dd\ud55c\ub2e4. \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \ub3cc\uc544\uac00\ub294\uc9c0 \uc880 \ub354 \uc54c\uae30 \uc704\ud574, \ub0b4\uac00 \uc9e0 \ucf54\ub4dc\ub97c \ub610 \ud55c\ubc88 \ubcf4\uc790. const float JUMP_SPEED = 500.f; ///< \uc810\ud504 \uc2dc \uc0c1\uc2b9 \uc18d\ub3c4 const float GRAVITY = 980.f; ///< \uc911\ub825 \uac00\uc18d\ub3c4 (\ub2e8\uc704: \ud53d\uc140/\ucd08\u00b2 \uac00\uc815) const float LEVEL = 500.f; ///< \uc9c0\uba74 \ub808\ubca8(y\uc88c\ud45c) void Movement::Update(Manager& manager, const float dt) { std::vector<Entity::ID> entities = manager.Query<Position, Velocity, PlayerState, Sprite>(); for(const auto& id : entities) { Position* pos = manager.GetComponent<Position>(id); Velocity* vel = manager.GetComponent<Velocity>(id); PlayerState* state = manager.GetComponent<PlayerState>(id); Sprite* spr = manager.GetComponent<Sprite>(id); // \uc810\ud504 \ub85c\uc9c1: \uc810\ud504 \uc0c1\ud0dc\uac00 \uc544\ub2c8\uba70 \uc9c0\uba74\uc5d0 \uc788\uc744 \ub54c \uc810\ud504 \uba85\ub839 \ucc98\ub9ac if(state->now_state == PlayerState::Jumping && !state->is_jumping && pos->y >= LEVEL) { vel->y = -JUMP_SPEED; state->is_jumping = true; } // \uc0c1\ud0dc\uc5d0 \ub530\ub978 \uc218\ud3c9 \uc774\ub3d9 \uc18d\ub3c4 \ubc0f \uc2a4\ud504\ub77c\uc774\ud2b8 \uc2a4\ucf00\uc77c \uc870\uc815 switch(state->now_state) { case PlayerState::MovingLeft: vel->x = -200.f; spr->sprite.setScale(-0.5f, 0.5f); break; case PlayerState::MovingRight: vel->x = 200.f; spr->sprite.setScale(0.5f, 0.5f); break; case PlayerState::Jumping: printf(\"JUMP\\n\"); // \uc810\ud504 \uc911 \ud2b9\ubcc4\ud55c \uc218\ud3c9 \ubcc0\ud654 \uc5c6\uc74c, vel->x\ub294 \uc720\uc9c0\ub428(\uae30\ubcf8\uc801\uc73c\ub85c 0) break; default: // Idle \uc0c1\ud0dc \ub4f1\uc5d0\uc11c\ub294 \uc218\ud3c9 \uc18d\ub3c4 0 vel->x = 0.f; break; } // \uc911\ub825 \uc801\uc6a9: \uc9c0\uba74 \uc704\uac00 \uc544\ub2d0 \uacbd\uc6b0(\uc810\ud504 \uc911) \uc911\ub825 \uac00\uc18d\ub3c4 \uc801\uc6a9 if(pos->y < LEVEL) vel->y += GRAVITY * dt; // \uc9c0\uba74 \ub3c4\ub2ec \ucc98\ub9ac: \uc9c0\uba74\uc744 \ub118\uc5b4\uac00\uc9c0 \uc54a\ub3c4\ub85d \uc704\uce58, \uc0c1\ud0dc \ubcf4\uc815 if(pos->y + vel->y * dt >= LEVEL) { pos->y = LEVEL; vel->y = 0.f; state->is_jumping = false; // \uc810\ud504 \uc0c1\ud0dc\uc5d0\uc11c \uc9c0\uba74 \ub3c4\ub2ec \uc2dc Idle \uc0c1\ud0dc\ub85c \uc804\ud658 if(state->now_state == PlayerState::Jumping) state->now_state = PlayerState::Idle; } // \uc704\uce58 \uac31\uc2e0: \uc18d\ub3c4 * \uc2dc\uac04(dt)\uc744 \uc704\uce58\uc5d0 \ubc18\uc601 pos->x += vel->x * dt; pos->y += vel->y * dt; } } \uc810\uc810 \uac8c\uc784\uc758 \uc644\uc131\uc774 \uc544\ub2c8\ub77c, \uc5d4\uc9c4\uc758 \uc644\uc131\uc744 \uc704\ud55c \uc6c0\uc9c1\uc784\uc744 \uacc4\uc18d\uc774\uc5b4 \ub098\uac00\ub2e4 \ubcf4\ub2c8...\u314e \ucf54\ub4dc\uac00 \uc880 \uadf8\ub807\uc9c0\ub9cc, \ud575\uc2ec \uc544\uc774\ub514\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \ucffc\ub9ac\ub85c \uc5d4\ud2f0\ud2f0\ub97c \uac00\uc838\uc628\ub2e4. \uc0c1\ud669\uc5d0 \ub9de\uac8c \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. \ub05d\uc784. \u3147\u3147 \uc774\ub7f0 \uc2dd\uc73c\ub85c ECS\ub97c \ub9cc\ub4e4\uc5b4 \ubcf8 \uac83\uc774\uc5c8\ub2e4\ub780\ub2e4. 4. \uc7a5\ub2e8\uc810 ECS \uad6c\uc870\uc758 \ub300\ud45c\uc801\uc778 \uc7a5\ub2e8\uc810\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\ub9ac\ud558\uaca0\uc74c. \uc7a5\ub2e8\uc810 \uc7a5\uc810 \ub300\uaddc\ubaa8 \uc2dc\ubbac\ub808\uc774\uc158\uc5d0 \uc6a9\uc774, \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \uc6a9\uc774 \ub2e8\uc810 \ud559\uc2b5 \uace1\uc120, \ucd08\uae30 \uc124\uacc4 \uc798\ubabb\ud558\uba74 \u3148\u3148\u3148 \uc7a5\ub2e8\uc810\uc744 \ub530\ub85c \uc124\uba85\ud574\uc57c\ud560 \ud544\uc694\uac00 \uc788\ub0a8. \uac1d\uccb4 \uc21c\ud68c\uc2dc \uc0ac\uc774\uc988\uac00 \uc77c\uc815\ud55c \ucef4\ud3ec\ub10c\ud2b8\ub9cc\uc744 \uac00\uc838\uc624\uae30\uc5d0 \uce90\uc2dc \ubbf8\uc2a4\uac00 \ub35c\ub0a8. \ub530\ub77c\uc11c, \ub300\uaddc\ubaa8 \uc2dc\ubbac\ub808\uc774\uc158\uc5d0 \uc88b\uc74c. SOA(\ubc30\uc5f4\uc758 \uad6c\uc870\uccb4\ub4e4)\ub97c \uc0ac\uc6a9\ud558\uae30\uc5d0 \ubcd1\ub82c\ud504\ub85c\uadf8\ub798\ubc0d\ud560\ub54c \uc88b\uc74c. \ub2e8\uc810\uc740 \ub530\ub85c \ub9d0\ud560 \ud544\uc694\uac00 \uc5c6\uc774 \ucf54\ub4dc\ub97c \ubcf4\uba74 \ub2f5 \ub098\uc624\uc796\uc2b4? C++\uc774\ub791 \uac8c\uc784 \uc5d4\uc9c4 \uad6c\uc870 \uc870\uae08\uc774\ub77c\ub3c4 \uc54c\uc544\uc57c \uc774\ud574\uac00 \ub418\ub294 \uc218\uc900\uc758 \ucf54\ub4dc\uc784. \uc554\ud2bc \uadf8\ub807\ub2e4 \ud558\uc790. 5. Penitence \uc65c \ud3ec\uae30\ud568? \ub048\uae30 \u3149\u3149 \uc6d0\ub798 Penitence \ud504\ub85c\uc81d\ud2b8\uc758 \uc758\uc758\ub294, \ub2e4\uc74c\uacfc \uac19\uc558\uc74c. ECS \uad6c\uc870 \ub9cc\ub4e4\uc5b4\ubcf4\uae30 2D \uac8c\uc784 \ub9cc\ub4e4\uae30 \uc804\ubc18\uc801\uc73c\ub85c, Cpp \ucf54\ub4dc \uc791\uc131 \ub808\ubca8\uc5c5\uc774 \ub098\uc758 \ubaa9\ud45c\uc600\ub2e4. \uc774 \ub9d0\uc784. \uadfc\ub370, \uc774...MIR\uc5d4\uc9c4\uc744 \ub9cc\ub4e4\ub2e4\ubcf4\ub2c8...\ub108\ubb34 \ub9e4\ub825\uc801\uc778\uac70... Penitence\ub97c \ub9cc\ub4e4\uc5b4\uc57c\uaca0\ub2e4\ub294 \uc5f4\uc815\uc774 \uc2dd\uc5c8\uc74c. \uadfc\ub370 \uacb0\ub860\uc801\uc73c\ub85c, \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uc608\uc815\uc784. \uc2a4\ud0e0\ub4dc \uc5bc\ub860 \ud615\uc2dd\uc758 \uac8c\uc784\uc774 \uc544\ub2c8\ub77c, MIR\uc5d4\uc9c4\uc758 \ubc84\uc804\uc774 \uc5c5\uadf8\ub808\uc774\ub4dc\ub420\ub54c \ub9c8\ub2e4 \uc5d4\uc9c4\uc758 \uc2e0\uae30\ub2a5\uc744 \ubf50\ub0bc \uc218 \uc788\ub294 \ub370\ubaa8 \ucee8\uc149 \uac8c\uc784 \uc774 \ubc29\uc2dd\uc73c\ub85c \ub098\uc624\uc9c0 \uc54a\uc744\uae4c \uc2f6\uc74c. (\uc0ac\uc2e4, Penitence\uc758 \ucee8\uc149\uc744 \ubc84\ub9ac\uae30\uc5d0\ub294 \ub108\ubb34 \uc544\uae5d\uae30\ub3c4 \ud574\uc11c \u3147\u3147;;;) \uc544, \ub048\uae30\uc5c6\ub294 \uac83\ub3c4 \u3147\u3148.... \uadf8\uc5d0 \ub300\ud574\uc11c\ub294 \uc808\ub300 \ud560\ub9d0\uc774 \uc5c6\ub2e4... 6. \ub9c8\ubb34\uc73c\ub9ac \uccab\uae00\ub85c \ub0b4\uac00 \ub9cc\ub4e0 \uc5d4\uc9c4, MIR\ub97c \uc18c\uac1c\ud588\ub2e4. \uc544\ub9c8, \ub0b4 \uc0dd\uac01\uc5d0 MIR\ub294 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c(\ud604\ub300\uc801\uc778, C++\uc744 \ubc84\ub9ac\uace0 \u314e\u314e) \ub9ac\ub274\uc5bc\ub418\uc9c0 \uc54a\uc744\uae4c! \uc774\uc81c 2025\uc778\ub370, \ub2e4\ub4e4 HNY","title":"MIR 1.0"},{"location":"posts/2024-12-12/#ecs-penitence","text":"\uccab \uae00\uc744 \ubb58\ub85c \ud560\uae4c \ud558\ub2e4\uac00, \ub0b4\uac00 \ucd5c\uadfc\uc5d0 \ucc0d\uba39\ud574\ubcf8 \uad6c\uc870\uc5d0 \ub300\ud574 \ub9d0\ud574\ubcf4\uace0\uc790 \ud55c\ub2e4. \uc74c\uc74c. \ubc14\ub85c Entity-Component-System(\uc904\uc5ec\uc11c, ECS) \uc774\ub2e4.","title":"ECS \uc544\ud0a4\ud14d\ucc98 \ud328\ud134 (\ub0b4 \uac8c\uc784, Penitence\ub97c \ub54c\ub824\uce5c \uc774\uc720)"},{"location":"posts/2024-12-12/#1","text":"\uc62c\ud574 \ucd08\uc5d0 Rust \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 Bevy\uc5d4\uc9c4 \uc18c\uac1c \uc601\uc0c1\uc744 \ubd24\ub2e4. Bevy\ub294 \ud2b9\uc774\ud558\uac8c \uc804\ud615\uc801\uc778 OOP \uad6c\uc870(Game Object, Actor...)\ub97c \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4.","title":"1. \uc5b4\uca4c\ub2e4...\uc54c\uac8c \ub410\ub294\uc9c0"},{"location":"posts/2024-12-12/#ecs","text":"\uc790, ECS\ub294 \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \ub3d9\uc791\ud558\ub294\uac00? \uc6b0\uc120 \uc774\ub97c \uc54c\uc544\ubcf4\uae30 \uc704\ud574 \ub370\uc774\ud130 \uc5d0 \ub300\ud574 \uba3c\uc800 \uc54c\uc544\ubcfc \ud544\uc694\uac00 \uc788\ub2e4.","title":"ECS\uc758 \ub4f1\uc7a5\uc774\uc5c8\ub2e4."},{"location":"posts/2024-12-12/#2-data-oriented-programming","text":"\uba38\ub9bf \uc18d\uc73c\ub85c \uc544\ubb34 \uac1d\uccb4(Object)\ub098 \ub5a0\uc62c\ub824 \ubcf4\ub77c. OOP\uc758 \uc775\uc219\ud55c \uac1c\ubc1c\uc790\ub4e4\uc740 \ubb50, \uace0\uc591\uc774, \uac15\uc544\uc9c0, \ub3c4\ub0a0\ub4dc \ud2b8\ub7fc\ud504 \ub4f1\ub4f1 \uc5ec\ub7ec \uac1d\uccb4\ub97c \uc0dd\uac01\ud574\ub0c8\uc744 \uac83\uc774\ub2e4. \ubb50, \uadf8\ub0e5 \uc0ac\ub78c\uc744 \uac1d\uccb4\ub85c \ub098\ud0c0\ub0b8\ub2e4 \uce58\uc790. (\uc774\ud558 \ubaa8\ub4e0 \uc608\uc2dc \ucf54\ub4dc\ub294 \ub0b4\uac00 C++ \uac1c\ubc1c\uc790\ub2c8 \uadf8\ub807\uac8c \ub410\ub2e4 \u3147\u3147) #include <iostream> #include <string> class Person { public: // \uc5ec\ub7ec \uc0dd\uc131\uc790\ub4e4... // \ubcf5\uc0ac / \uc774\ub3d9 / \ud560\ub2f9 \uc5f0\uc0b0\uc790... // \uadf8\ub9ac\uace0 \ubb50 \ub610 \uc774\uc0c1\ud55c \uac8c\ud130 \uc138\ud130 \uc5b4\uca4c\uad6c \uc800\uca4c\uad6c... void Walk() // \uadf8\ub0e5 \uac77\ub294 \ud568\uc218 { std::cout << name << \"is walking\" << std::endl; } protected: std::string name; // \uc774\ub984 float height; // \uc2e0\uc7a5 float weight; // \ubab8\ubb34\uac8c }; \ud604\uc7ac \uc0ac\ub78c \uac1d\uccb4\uc758 \uba64\ubc84\ub294 name, height, weight\uc774\ub2e4. \uac01\uac01\uc758 \uc790\ub8cc\ud615\uc740 8\ubc14\uc774\ud2b8 \ubb38\uc790\uc5f4\uacfc 4\ubc14\uc774\ud2b8 \ubd80\ub3d9\uc18c\uc218\uc810 \uc18c\uc218 \ub450\uac1c. \ub9cc\uc57d\uc5d0 \ubb34\uc2a8, \uad70 \uc7a5\ubcd1 \uad00\ub9ac \ubca1\ud130\ub97c \ub9cc\ub4e4\uc5b4 \uc21c\ud68c\ud55c\ub2e4 \uac00\uc815\ud574\ubcf4\uc790. std::vector<Person> soldiers; for(const auto& soldier : soldiers) soldier.Walk(); \uadf8\ub7fc \uc774 \ubca1\ud130\ub294, \uad6c\uc870\uccb4\uc758 \ubc30\uc5f4 (Array Of Structure)\uc774 \ub41c\ub2e4.","title":"2. \ub370\uc774\ud130 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d (Data Oriented Programming)"},{"location":"posts/2024-12-12/#_1","text":"\uc76d? \uad1c\ucc2e\uc740\uac70 \uc544\ub2cc\uac00\uc694? \ubb50\uac00 \ubb38\uc81c\uc8e0? \ub77c\uace0 \ubb3b\ub294\ub2e4\uba74, \ubb3c\ub860 \uac1c\ubc1c\ud560\ub550, \ud3b8\ud558\uaca0\uc9c0. \uadf8\uac83\uc774 OOP\uc758 \ubaa9\uc801\uc774\ub2c8\uae4c\uc789. \ud558\uc9c0\ub9cc \uc804\uacf5\uc790\ub77c\uba74 \ucef4\ud4e8\ud130\uad6c\uc870 \uc2dc\uac04\uc5d0 \ub4e4\uc5b4\ubd24\uc744\ubc95\ud55c \ub140\uc11d\uc774 \ub4f1\uc7a5\ud55c\ub2e4\uba74 \uc598\uae30\uac00 \ub2ec\ub77c\uc9c4\ub2e4!","title":"\uc774\uac8c \ubb38\uc81c\ub2e4."},{"location":"posts/2024-12-12/#cache","text":"\uadf8\ub0e5, \uc26c\uc6b4 \uc598\uc2dc\ub97c \ub4e4\uc5b4\ubcf4\uc790. \ub2f9\uc2e0\uc740 \uc9c0\uae08\ubd80\ud130 \ub3c4\uc11c\uad00 \uc0ac\uc11c\uc784. \uadfc\ub370, \ucc45\ub4e4\uc774 \uc8fc\uc81c, \ucd08\uc131, \ucd9c\uac04 \ub0a0\uc9dc \uc0c1\uad00\uc5c6\uc774 \uc544\ubb34\ub370\ub098 \ub9c9 \uaf42\ud600 \uc788\uc74c. \uadc0\ucc2e\uc544 \uc8fd\uace0 \uc2f6\uc744\uac70 \uc544\ub2cc\uac00? \uc5ec\uae30\uc11c \uc911\uc694\ud55c \uac74, \uac10\uc815\uc774 \uc544\ub2c8\ub77c \uc774\uc720\ub2e4. \uadf8 \uadc0\ucc2e\uc74c\uc73c\ub85c \uc778\ud55c \uc790\uac00 \uc18c\uba78 \uc695\uad6c\uac00 \uc5b4\ub514\uc11c \uae30\uc778\ud558\ub294\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4. \ucc45\uc774 \uc788\ub294 \uc704\uce58\uac00 \uc9c0 \ub9f4\ub300\ub85c\ub77c\uba74 \uc65c \ud798\ub4e4\uc5b4\uc9c8\uae4c. \uc815\ub2f5\uc740, \uac81\ub098 \uc654\ub2e4\ub9ac\uac14\ub2e4\ub9ac \ud574\uc57c\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub0b4\uac00 \uc0dd\uac01\ud558\uae30\uc5d4, S\ucc45\uc740 \uc800\ucabd\uc5d0 \uc788\uc5b4. -> \uc544, \uc544\ub2c8\uc5c8\ub124. \uc800\uae34\uac00. -> \ub610 \uc544\ub2c8\ub124. \uc345. \uc774\ub807\uac8c \ub41c\ub2e4\ub294 \uac70\ub2e4. \uc774\ub7f0 \uc0c1\ud669\uc744 \uce90\uc2dc\ub3c4 \uacaa\ub294\ub370, \uc774\ub97c \uce90\uc2dc \ubbf8\uc2a4 \ub77c \ud55c\ub2e8\ub2e4. \uadf8\ub9ac\uace0 \uc870\uae08\uc774\ub77c\ub3c4 \uc9c0\ub2a5\uc774 \uc788\ub294 \uc0ac\ub78c\uc774\ub77c\uba74 \uc808\ub300 \uc774\ub807\uac8c \uad00\ub9ac\ud558\uc9c0 \uc54a\uc744\uac70\ub2e4. \ucd5c\uc18c\ud55c, \ucc45\uc774 \uc5b4\ub5a4 \ubd84\uc57c\uc758 \uc11c\uc801\uc778\uc9c0 \uc815\ub3c4\ub294...\ucf54\ud305\ud574\uc11c \uc55e\uc7a5\uc5d0\ub2e4 \ubd88\ud788\uc9c0 \uc54a\uaca0\ub098.","title":"\uadf8\uac83\uc740 \ubc14\ub85c \uce90\uc2dc(Cache)\ub2e4."},{"location":"posts/2024-12-12/#_2","text":"\uc798 \uc0dd\uac01\ud574\ubcf4\ub77c. \ucef4\ud4e8\ud130 \ud558\ub4dc\uc6e8\uc5b4\uc5d0\uc11c DATA \ub294 \uacb0\uad6d \uba54\ubaa8\ub9ac \uacf5\uac04\uc774\ub2e4. Person \uac1d\uccb4\uc758 \uba54\ubaa8\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ubaa8\ub378\ub9c1 \uac00\ub2a5\ud558\ub2e4. Person name(8 byte) height(4 byte) weight(4 byte) \uc790, \uc774\uc81c soldiers \ubca1\ud130\ub97c \uc21c\ud68c\ud55c\ub2e4 \uc0dd\uac01\ud574\ubcf4\uc790. \ud3ec\uc778\ud130\uac00 \ucc98\uc74c\uc5d0\ub294 8\ubc14\uc774\ud2b8\uc9dc\ub9ac name\uc744 \uac00\ub9ac\ud0a4\uace0 \uc21c\uc11c\ub300\ub85c height, weight\ub97c \uac00\ub9ac\ud0ac \uac83\uc774\ub2e4. \ud3ec\uc778\ud130\ub294 \uc5b4\ub5a8\ub54c\uc5d0\ub294 8\ubc14\uc774\ud2b8\ub97c \uc6c0\uc9c1\uc5ec\uc57c \ud558\uace0 \uc5b4\ub5a8 \ub54c\ub294 4\ubc14\uc774\ud2b8\ub97c \uc6c0\uc9c1\uc5ec\uc57c \ud55c\ub2e4. \uc790, \uc774\ub7ec\ud55c \ubc29\uc2dd \ub54c\ubb38\uc5d0 \uba54\ubaa8\ub9ac \ucc38\uc870\uc5d0 \uc0dd\uac01\ubcf4\ub2e4 \ub9ce\uc740 (\uc815\ub9d0\uc774\ub2e4.) \ub9ac\uc18c\uc2a4\uac00 \ub0ad\ube44\ub41c\ub2e4.","title":"\uadfc\ub370, \uce90\uc2dc\ub3c4 \ub611\uac19\ub2e4."},{"location":"posts/2024-12-12/#_3","text":"\uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc88b\uc740 \ubc29\ubc95 \uc911 \ud558\ub098\ub294, \uac1d\uccb4 \uc548\uc5d0 \uc788\ub294 \ub370\uc774\ud130\uc640 \ub85c\uc9c1\uc744 \ubd84\ub9ac\ud558\ub294 \uac83\uc774\ub2e4. \uc74c...\uc6d0\ub798 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \ub9cc\ub4e4\uc5b4 \ubcf4\uc790. #include <iostream> #include <string> // \ud074\ub798\uc2a4 \ub300\uc2e0 \uc54c\uae30 \uc27d\uac8c \ub124\uc784 \uc2a4\ud398\uc774\uc2a4 namespace Person { std::string name; float height; float weight; void Walk(const Person::name& _name) { std::cout << _name << \"is walking\" << std::endl; } }; std::vector<Person::name> soldiers; // \uc21c\ud68c for(const auto& name : soldiers) Person::Walk(name); \"\uc5b4? \uadf8\ub7fc \uc2e0\uc7a5\uc774\ub098 \ubab8\ubb34\uac8c\ub97c \uc21c\ud68c\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud558\ub098\uc694?\" \uadf8 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. #include <unordered_map> std::unordered_map<Person::name, Person::height> soldier_heights; void PrintHeight(float _h) { std::cout << _h << std::endl; } // \uc21c\ud68c for(const auto& name : soldiers) PrintHeight(soldier_heights[name]); \uae09\uc870\ud55c \ucf54\ub4dc\ub77c\uc11c \uc880...\ubcd1\uc2e0\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc, \ud575\uc2ec \uc544\uc774\ub514\uc5b4\ub294 \uc774\uac70\ub2e4! \uc774\ub7f0\uc2dd\uc73c\ub85c \ub370\uc774\ud130\uc640 \ub85c\uc9c1\uc744 \uac1d\uccb4\ub77c\ub294 \uac10\uc625\ud574\uc11c \ud574\ubc29\uc2dc\ud0a4\ub294 \uac83\uc774\ub2e4! \uadf8\ub9ac\uace0 \uc774\ub807\uac8c \ubc30\uc5f4\uc758 \uad6c\uc870\uccb4(Structure Of Arrays)\ub85c \ub9cc\ub4dc\ub294\uac8c, \ub370\uc774\ud130 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d, \ub370\uc774\ud130 \uc9c0\ud5a5 \uc124\uacc4\uc774\ub2e4.","title":"\uadf8\ub7fc \uc5b4\ub5bb\uac8c \ud574\uc57c\ud568?"},{"location":"posts/2024-12-12/#3-ecs","text":"\uc74c...\uc6b0\uc120 \uc704\uc5d0\uc11c soldiers \ubca1\ud130\ub97c \uc21c\ud68c\ud588\uc744\ub54c, Person::name\uc73c\ub85c \uc21c\ud68c\ud588\ub358 \uac83\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc14\uafd4\ubcf4\uc790. #include <string> #include <vector> #include <unordered_map> namespace Entity { using id = int; } namespace Component { using name = std::string; using height = float; using weight = float; }; namespace System { auto walk = [&](Entity::id _id) { std::cout << names[_id] << \"is walking\\n\"; }; std::unordered_map<Entity::id, Component::name> names; } int main() { std::vector<Entity::id> soldiers; // \ub300\ucda9 \uc5d4\ud2f0\ud2f0 \ucd08\uae30\ud654 \ucf54\ub4dc ~~~ for(const int id : soldiers) System::walk(id); } \uc704 \ucf54\ub4dc\ub97c \ubcf4\uc558\uc744\ub54c, Person \uac1d\uccb4\uc758 \ud754\uc801\uc774 \ubcf4\uc774\ub294\uac00? \uc6b0\ub9ac\ucc98\ub7fc Person\uc744 \uc218\uc815\ud588\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc544\ub294 \uac83\uc774 \uc544\ub2c8\ub77c\uba74, \uc544\ub9c8 \ucc3e\uae30\uc5d0 \uc5b4\ub824\uc6b8 \uac83\uc774\ub2e4. \ucf54\ub4dc\uc5d0 \uc774\ubbf8 \ud78c\ud2b8\uac00 \ub098\uc640\uc788\ub2e4.","title":"3. \uadf8\ub798\uc11c ECS\uac00 \ubb50\uc784"},{"location":"posts/2024-12-12/#entity-id","text":"\ub098\ub294 \uc704 \ucf54\ub4dc\uc5d0\uc11c int\ub85c id\ub97c \ud45c\ud604\ud588\ub2e4. \uc2ac\uc2ac, \uc5d4\uc9c4\ubd80\ud130 \uc2dc\uc791\ud574 \uac1c\ubc1c \ubaa8\ub4e0 \ubd80\ubd84\uc744 \ud568\uaed8 \ud558\ub824 \ud588\ub358 \ub098\uc758 \uc131\uc7a5 \ud504\ub85c\uc81d\ud2b8, 'Penitence'\uc5d0 \ub300\ud574 \ub9d0\ud560 \uc218 \uc788\uac8c \ub41c\uac70 \uac19\ub2e4. (\ud504\ub85c\uc81d\ud2b8 \ub9c1\ud06c) \ucc38\uace0\ub85c, Penitence\uc5d0\uc11c\ub294 Entity\uac00 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\uac00 \ub418\uc5b4\uc788\ub2e4. #include <cstdint> namespace MIR // \uc5d4\uc9c4 \uc774\ub984 { namespace ECS // ECS \uc544\ud0a4\ud14d\ucc98\uc640 \uad00\ub828\ub41c \uadf8\ub8f9 { struct Entity // \uc0ac\uc2e4 \uc774\ub984\uacf5\uac04\uc73c\ub85c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc558\uc744\ub4ef... { using ID = uint16_t; }; } }","title":"Entity\ub780, \ud2b9\uc815 \ub370\uc774\ud130\ub97c \uc2dd\ubcc4\ud560 \uc218 \uc788\ub294 \ucd5c\uc18c\ud55c\uc758 ID\uc774\ub2e4."},{"location":"posts/2024-12-12/#component","text":"\uc790, DOP\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uc640 \ub85c\uc9c1\uc744 \ubd84\ub9ac\ud55c\ub2e4\uace0 \uc124\uba85\ud588\ub2e4. \uac70\uae30\uc11c \ub9d0\ud558\ub294 \ub370\uc774\ud130\ub97c ECS\uc5d0\uc11c\ub294 \ucef4\ud3ec\ub10c\ud2b8 \ub77c \ud55c\ub2e4. \uc0c1\uc6a9\uc5d4\uc9c4 \uac8c\uc784 \uac1c\ubc1c\uc790\ub77c\uba74 \ucef4\ud3ec\ub10c\ud2b8\uc758 \uac1c\ub150\uc5d0 \ub300\ud574\uc11c \uc798 \uc54c\uace0 \uc788\uc744\ud150\ub370, \uadf8\uac70 \ub9de\ub2e4. \uc74c...\ub9d0\uc774 \ub098\uc654\uc73c\ub2c8 \ub9d0\uc778\ub370, ECS\ub97c \uc801\uc6a9\uc2dc\ud0a8 \uac8c\uc784 \uad6c\uc870 \ud50c\ub85c\uc6b0\ub294 \ub300\ucda9 \ub2e4\uc74c\uacfc \uac19\uc774 \ud758\ub7ec\uac04\ub2e4. \uac8c\uc784 \ucd08\uae30\ud654 \uac8c\uc784 \uc5c5\ub370\uc774\ud2b8 \uac8c\uc784 \uc167\ub2e4\uc6b4 \uc5d4\ud2f0\ud2f0 ID \uc124\uc815 \ucef4\ud3ec\ub10c\ud2b8\uc5d0 \uc2dc\uc2a4\ud15c \uc801\uc6a9 \ub3d9\uc801 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \ud574\uc81c \ucef4\ud3ec\ub10c\ud2b8 \ucd08\uae30\uac12 \uc124\uc815 \uc2dc\uc2a4\ud15c\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub41c \ucef4\ud3ec\ub10c\ud2b8 \uc800\uc7a5 (\uadf8 \uc678 \uc774\uac83\uc800\uac83) \ub098 \uac19\uc740 \uacbd\uc6b0\ub294, \ucef4\ud3ec\ub10c\ud2b8 \uad6c\uc870\uac00 \ub3c5\ud2b9\ud558\ub2e4. (\ucf54\ub4dc \ub09c\ud574\ud568 \uc8fc\uc758.) // \ucef4\ud3ec\ub10c\ud2b8 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4 namespace MIR { constexpr std::uint8_t MAX_COMPONENTS = 0xFF; struct Component { using Tag = std::uint32_t; virtual ~Component() = default; }; } namespace MIR { // \ud480 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4 class PoolBase { public: virtual ~PoolBase() = default; }; // \ucef4\ud3ec\ub10c\ud2b8 \ud480 template <typename T> class ComponentPool : public PoolBase { public: static constexpr std::size_t MAX_SIZE = 0xFF; ComponentPool() = default; template <typename... Args> inline std::unique_ptr<Component, std::function<void(Component*)>> Acquire(Args&&... args) { T* component; if (pool.empty()) { // \ud480\uc5d0 \uc5ec\uc720 \ucef4\ud3ec\ub10c\ud2b8\uac00 \uc5c6\uc73c\ubbc0\ub85c \uc0c8\ub85c\uc6b4 \ucef4\ud3ec\ub10c\ud2b8 \ud560\ub2f9 component = new T(std::forward<Args>(args)...); } else { // \uae30\uc874 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc7ac\uc0ac\uc6a9 component = pool.top(); pool.pop(); // \uc0c8 \uc778\uc790\ub85c \uc7ac\ucd08\uae30\ud654 *component = T(std::forward<Args>(args)...); } // \ucee4\uc2a4\ud140 \ud574\uc81c\uc790 \uc815\uc758: unique_ptr\uc774 \ud574\uc81c\ub420 \ub54c \ud638\ucd9c\ub428 auto deleter = [this](Component* ptr) { this->Release(static_cast<T*>(ptr)); }; return std::unique_ptr<Component, std::function<void(Component*)>>(component, deleter); } private: std::stack<T*> pool; inline void Release(T* component) { if (component) { if (pool.size() < MAX_SIZE) pool.push(component); else delete component; } } }; }; \uc5ec\uae30\uae4c\uc9c0\uac00 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uad00\ub9ac\ud558\ub294 \ub0b4 \ubc29\uc2dd\uc784. Component\ub97c \uad00\ub9ac\ud560\ub54c \ud3b8\ud558\uac8c type_info, index\ub97c \uc0ac\uc6a9\ud560\uae4c \ud588\uc9c0\ub9cc, \uc5d4\ud2f0\ud2f0\ub97c ID\ub85c \uad6c\ubd84\ud588\ub358 \uac83\ucc98\ub7fc, \ube44\uc2b7\ud55c \ubc29\uc2dd\uc744 \ucc44\ud0dd. (\ub2e8, ID\ub77c\ub294 \uc774\ub984\uc740 Entity::ID\uc640 \uacb9\uccd0\uc11c \ud5f7\uac08\ub9b4 \uc218 \uc788\uae30\uc5d0, Tag\ub77c\ub294 \uc0c8\ub85c\uc6b4 \uc2dd\ubcc4\uc790\ub97c \uc815\uc758\ud568.) \ub610\ud55c, \uce90\uc2dc \uce5c\ud654\ub825\uc744 \ucd5c\ub300\ub85c \ub04c\uc5b4\uc624\uae30 \uc704\ud574 \uc2a4\ud0dd\uc744 \uc774\uc6a9\ud574\uc11c \ucef4\ud3ec\ub10c\ud2b8 \ud480\uc744 \ub9cc\ub4e6. \uc544\ub798\ub294 \ub9e4\ub2c8\uc800 \ud074\ub798\uc2a4. (\ub354 \ub09c\ud574\ud568) namespace MIR { namespace ECS { using Mask = std::bitset<MAX_COMPONENTS>; using Data = std::unordered_map<Component::Tag, std::unique_ptr<Component, std::function<void(Component*)>>>; using Pool = std::shared_ptr<PoolBase>; class Manager { public: Manager() = default; ~Manager(); Entity::ID CreateEntity(); void DestoryEntity(Entity::ID id); template <typename T, typename... Args> requires std::constructible_from<T, Args...> inline void AddComponent(Entity::ID id, Args&&... args) { if (masks.find(id) == masks.end()) throw std::runtime_error(\"Invalid Entity ID\"); Component::Tag tag = GetTag<T>(); if (masks[id][tag]) throw std::runtime_error(\"Component already exists for this Entity\"); masks[id].set(tag); if(pools.find(tag) == pools.end()) pools[tag] = std::make_shared<ComponentPool<T>>(); auto pool = std::static_pointer_cast<ComponentPool<T>>(pools[tag]); auto component = pool->Acquire(std::forward<Args>(args)...); components[id][tag] = std::move(component); } template <typename T> inline T* GetComponent(Entity::ID id) { Component::Tag tag = GetTag<T>(); if(!masks[id][tag]) return nullptr; auto it = components.find(id); if(it != components.end() && it->second.find(tag) != it->second.end()) return static_cast<T*>(it->second[tag].get()); return nullptr; } template <typename T> inline bool HasComponent(Entity::ID id) { Component::Tag tag = GetTag<T>(); return masks[id][tag]; } template <typename... Components> inline std::vector<Entity::ID> Query() const { std::vector<Entity::ID> result; for(const auto& [id, mask] : masks) if((mask.test(GetTag<Components>()) && ...)) result.emplace_back(id); return result; } private: /// \uc5d4\ud2f0\ud2f0\ubcc4 \ucef4\ud3ec\ub10c\ud2b8 \ub370\uc774\ud130\ub97c \uad00\ub9ac\ud558\ub294 \ub9f5 std::unordered_map<Entity::ID, Data> components; /// \uc5d4\ud2f0\ud2f0\ubcc4 \ucef4\ud3ec\ub10c\ud2b8 \ubcf4\uc720 \ub9c8\uc2a4\ud06c\ub97c \uad00\ub9ac\ud558\ub294 \ub9f5 std::unordered_map<Entity::ID, Mask> masks; /// \ucef4\ud3ec\ub10c\ud2b8 \ud0dc\uadf8\ubcc4 \ud480(Pool)\uc744 \uad00\ub9ac\ud558\ub294 \ub9f5 std::unordered_map<Component::Tag, Pool> pools; /// \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc5d4\ud2f0\ud2f0 ID\ub97c \uad00\ub9ac\ud558\ub294 \ud050 std::queue<Entity::ID> id_queue; /// \ub2e4\uc74c\uc5d0 \ud560\ub2f9\ud560 \uc5d4\ud2f0\ud2f0 ID inline static Entity::ID next_id = 0; /// \ub2e4\uc74c\uc5d0 \ud560\ub2f9\ud560 \ucef4\ud3ec\ub10c\ud2b8 \ud0dc\uadf8 inline static Component::Tag next_tag; inline Entity::ID GetID() { return next_id++; } template <typename T> inline static Component::Tag GetTag() { static Component::Tag tag = next_tag++; return tag; } }; } } \uc640 \uc9c0\uae08\ubd10\ub3c4 \ub108\ubb34 \uc18c\ub984\ub3cb\ub294 \ucf54\ub4dc\uc784. Mask <<<< \uc598\uac00 \ub0b4 \uc544\uc774\ub514\uc5b4\uc758 GOAT\uc784. \uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8 \uc2dc, \uc5d4\ud2f0\ud2f0\ub4e4\uc758 \uc0c1\ud0dc\ub97c \ud655\uc778\ud558\uace0 \uc21c\ud68c\ud560\ub54c Tag\ub85c \ud558\ub098 \ud558\ub098 \ucc3e\uc544\ubcf4\uac8c \ud558\ub294\uac8c \ub108\ubb34 \uc9dc\uce68... \uadf8\ub798\uc11c \ub0b4\uac00 \uc0dd\uac01\ud55c \uac83\uc911 \ud558\ub098\uac00 \ub2e4\uc74c\uacfc \uac19\ub2e4. '\ud2b9\uc815 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc5c5\ub370\uc774\ud2b8 \ub420 \uba87\uac00\uc9c0 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc5d4\ud2f0\ud2f0\uac00 '\ubb34\uc870\uac74' \uac00\uc9c0\uace0 \uc788\ub2e4 \ubcf4\uc7a5\uc2dc\ud0a4\uba74, \ubaa8\ub4e0 \uc5d4\ud2f0\ud2f0\ub97c \uac80\uc0ac\ud560 \ud544\uc694\uac00 \uc5c6\uc9c0 \uc54a\ub098?' \uadf8\ub807\uac8c, Mask\ub77c\ub294 \uad6c\uc870\ub97c \ub9cc\ub4e4\uace0, Query()\ub77c\ub294 \ud15c\ud50c\ub9bf \ud568\uc218\ub97c \ub9cc\ub4e6. Query()\uc758 \ud2b9\uc9d5\uc740 \ud30c\ub77c\ubbf8\ud130 \ud329 \ub0b4\ubd80\uc5d0 \ub4e4\uc5b4\uc628 \ubaa8\ub4e0 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uac00\uc9c0\ub294 \uc5d4\ud2f0\ud2f0 \ubca1\ud130 \ubc18\ud658\uc784. \uadf8\ub9ac\uace0 \uadf8 \uc5f0\uc0b0\uc774, \ube44\ud2b8\uc14b\uc73c\ub85c \ube60\ub974\uac8c \ub3d9\uc791\ud558\uace0, \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\ub3c4 \uc5b4\ub5a4 \uc5ed\ud560\uc744 \ud558\ub294 \ucf54\ub4dc\uc778\uc9c0 \uc27d\uac8c(?)\uc54c \uc218 \uc788\ub2e4\uace0 '\uc0dd\uac01\ud568.' \uc554\ud2bc, \uc774\uc81c \ub2e4\uc74c \ud1a0\ud53d.","title":"Component\ub780, \ub370\uc774\ud130\ub2e4."},{"location":"posts/2024-12-12/#system","text":"\uc774\ubbf8 \uc2dc\uc2a4\ud15c\uc5d0 \ub300\ud574 \ucef4\ud3ec\ub10c\ud2b8\uc5d0\uc11c \ubc18\uc808 \uc774\uc0c1 \uc124\uba85\ud55c \uac83 \uac19\ub2e4. \uadf8\ub0e5 \ucf54\ub4dc\ub97c \ubcf4\uba74\uc11c \uc774\ud574\ud574\ubcf4\uc790. namespace MIR { class System { public: System() = default; virtual ~System() = default; virtual void Update(ECS::Manager& manager, const float dt) = 0; }; } \uc5c5\ub370\uc774\ud2b8\uc5d0\uc11c \uc5d4\ud2f0\ud2f0\ub97c \uac00\uc838\uc624\uae30 \uc704\ud574 \uc758\uc874\uc131 \uc8fc\uc785\uc73c\ub85c ECS::Manager\ub97c \ud68d\ub4dd\ud55c\ub2e4. \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \ub3cc\uc544\uac00\ub294\uc9c0 \uc880 \ub354 \uc54c\uae30 \uc704\ud574, \ub0b4\uac00 \uc9e0 \ucf54\ub4dc\ub97c \ub610 \ud55c\ubc88 \ubcf4\uc790. const float JUMP_SPEED = 500.f; ///< \uc810\ud504 \uc2dc \uc0c1\uc2b9 \uc18d\ub3c4 const float GRAVITY = 980.f; ///< \uc911\ub825 \uac00\uc18d\ub3c4 (\ub2e8\uc704: \ud53d\uc140/\ucd08\u00b2 \uac00\uc815) const float LEVEL = 500.f; ///< \uc9c0\uba74 \ub808\ubca8(y\uc88c\ud45c) void Movement::Update(Manager& manager, const float dt) { std::vector<Entity::ID> entities = manager.Query<Position, Velocity, PlayerState, Sprite>(); for(const auto& id : entities) { Position* pos = manager.GetComponent<Position>(id); Velocity* vel = manager.GetComponent<Velocity>(id); PlayerState* state = manager.GetComponent<PlayerState>(id); Sprite* spr = manager.GetComponent<Sprite>(id); // \uc810\ud504 \ub85c\uc9c1: \uc810\ud504 \uc0c1\ud0dc\uac00 \uc544\ub2c8\uba70 \uc9c0\uba74\uc5d0 \uc788\uc744 \ub54c \uc810\ud504 \uba85\ub839 \ucc98\ub9ac if(state->now_state == PlayerState::Jumping && !state->is_jumping && pos->y >= LEVEL) { vel->y = -JUMP_SPEED; state->is_jumping = true; } // \uc0c1\ud0dc\uc5d0 \ub530\ub978 \uc218\ud3c9 \uc774\ub3d9 \uc18d\ub3c4 \ubc0f \uc2a4\ud504\ub77c\uc774\ud2b8 \uc2a4\ucf00\uc77c \uc870\uc815 switch(state->now_state) { case PlayerState::MovingLeft: vel->x = -200.f; spr->sprite.setScale(-0.5f, 0.5f); break; case PlayerState::MovingRight: vel->x = 200.f; spr->sprite.setScale(0.5f, 0.5f); break; case PlayerState::Jumping: printf(\"JUMP\\n\"); // \uc810\ud504 \uc911 \ud2b9\ubcc4\ud55c \uc218\ud3c9 \ubcc0\ud654 \uc5c6\uc74c, vel->x\ub294 \uc720\uc9c0\ub428(\uae30\ubcf8\uc801\uc73c\ub85c 0) break; default: // Idle \uc0c1\ud0dc \ub4f1\uc5d0\uc11c\ub294 \uc218\ud3c9 \uc18d\ub3c4 0 vel->x = 0.f; break; } // \uc911\ub825 \uc801\uc6a9: \uc9c0\uba74 \uc704\uac00 \uc544\ub2d0 \uacbd\uc6b0(\uc810\ud504 \uc911) \uc911\ub825 \uac00\uc18d\ub3c4 \uc801\uc6a9 if(pos->y < LEVEL) vel->y += GRAVITY * dt; // \uc9c0\uba74 \ub3c4\ub2ec \ucc98\ub9ac: \uc9c0\uba74\uc744 \ub118\uc5b4\uac00\uc9c0 \uc54a\ub3c4\ub85d \uc704\uce58, \uc0c1\ud0dc \ubcf4\uc815 if(pos->y + vel->y * dt >= LEVEL) { pos->y = LEVEL; vel->y = 0.f; state->is_jumping = false; // \uc810\ud504 \uc0c1\ud0dc\uc5d0\uc11c \uc9c0\uba74 \ub3c4\ub2ec \uc2dc Idle \uc0c1\ud0dc\ub85c \uc804\ud658 if(state->now_state == PlayerState::Jumping) state->now_state = PlayerState::Idle; } // \uc704\uce58 \uac31\uc2e0: \uc18d\ub3c4 * \uc2dc\uac04(dt)\uc744 \uc704\uce58\uc5d0 \ubc18\uc601 pos->x += vel->x * dt; pos->y += vel->y * dt; } } \uc810\uc810 \uac8c\uc784\uc758 \uc644\uc131\uc774 \uc544\ub2c8\ub77c, \uc5d4\uc9c4\uc758 \uc644\uc131\uc744 \uc704\ud55c \uc6c0\uc9c1\uc784\uc744 \uacc4\uc18d\uc774\uc5b4 \ub098\uac00\ub2e4 \ubcf4\ub2c8...\u314e \ucf54\ub4dc\uac00 \uc880 \uadf8\ub807\uc9c0\ub9cc, \ud575\uc2ec \uc544\uc774\ub514\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \ucffc\ub9ac\ub85c \uc5d4\ud2f0\ud2f0\ub97c \uac00\uc838\uc628\ub2e4. \uc0c1\ud669\uc5d0 \ub9de\uac8c \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. \ub05d\uc784. \u3147\u3147 \uc774\ub7f0 \uc2dd\uc73c\ub85c ECS\ub97c \ub9cc\ub4e4\uc5b4 \ubcf8 \uac83\uc774\uc5c8\ub2e4\ub780\ub2e4.","title":"System\uc774\ub780, \ub85c\uc9c1\uc774\ub2e4."},{"location":"posts/2024-12-12/#4","text":"ECS \uad6c\uc870\uc758 \ub300\ud45c\uc801\uc778 \uc7a5\ub2e8\uc810\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\ub9ac\ud558\uaca0\uc74c. \uc7a5\ub2e8\uc810 \uc7a5\uc810 \ub300\uaddc\ubaa8 \uc2dc\ubbac\ub808\uc774\uc158\uc5d0 \uc6a9\uc774, \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \uc6a9\uc774 \ub2e8\uc810 \ud559\uc2b5 \uace1\uc120, \ucd08\uae30 \uc124\uacc4 \uc798\ubabb\ud558\uba74 \u3148\u3148\u3148 \uc7a5\ub2e8\uc810\uc744 \ub530\ub85c \uc124\uba85\ud574\uc57c\ud560 \ud544\uc694\uac00 \uc788\ub0a8. \uac1d\uccb4 \uc21c\ud68c\uc2dc \uc0ac\uc774\uc988\uac00 \uc77c\uc815\ud55c \ucef4\ud3ec\ub10c\ud2b8\ub9cc\uc744 \uac00\uc838\uc624\uae30\uc5d0 \uce90\uc2dc \ubbf8\uc2a4\uac00 \ub35c\ub0a8. \ub530\ub77c\uc11c, \ub300\uaddc\ubaa8 \uc2dc\ubbac\ub808\uc774\uc158\uc5d0 \uc88b\uc74c. SOA(\ubc30\uc5f4\uc758 \uad6c\uc870\uccb4\ub4e4)\ub97c \uc0ac\uc6a9\ud558\uae30\uc5d0 \ubcd1\ub82c\ud504\ub85c\uadf8\ub798\ubc0d\ud560\ub54c \uc88b\uc74c. \ub2e8\uc810\uc740 \ub530\ub85c \ub9d0\ud560 \ud544\uc694\uac00 \uc5c6\uc774 \ucf54\ub4dc\ub97c \ubcf4\uba74 \ub2f5 \ub098\uc624\uc796\uc2b4? C++\uc774\ub791 \uac8c\uc784 \uc5d4\uc9c4 \uad6c\uc870 \uc870\uae08\uc774\ub77c\ub3c4 \uc54c\uc544\uc57c \uc774\ud574\uac00 \ub418\ub294 \uc218\uc900\uc758 \ucf54\ub4dc\uc784. \uc554\ud2bc \uadf8\ub807\ub2e4 \ud558\uc790.","title":"4. \uc7a5\ub2e8\uc810"},{"location":"posts/2024-12-12/#5-penitence","text":"\uc6d0\ub798 Penitence \ud504\ub85c\uc81d\ud2b8\uc758 \uc758\uc758\ub294, \ub2e4\uc74c\uacfc \uac19\uc558\uc74c. ECS \uad6c\uc870 \ub9cc\ub4e4\uc5b4\ubcf4\uae30 2D \uac8c\uc784 \ub9cc\ub4e4\uae30 \uc804\ubc18\uc801\uc73c\ub85c, Cpp \ucf54\ub4dc \uc791\uc131 \ub808\ubca8\uc5c5\uc774 \ub098\uc758 \ubaa9\ud45c\uc600\ub2e4. \uc774 \ub9d0\uc784. \uadfc\ub370, \uc774...MIR\uc5d4\uc9c4\uc744 \ub9cc\ub4e4\ub2e4\ubcf4\ub2c8...\ub108\ubb34 \ub9e4\ub825\uc801\uc778\uac70... Penitence\ub97c \ub9cc\ub4e4\uc5b4\uc57c\uaca0\ub2e4\ub294 \uc5f4\uc815\uc774 \uc2dd\uc5c8\uc74c.","title":"5. Penitence \uc65c \ud3ec\uae30\ud568? \ub048\uae30 \u3149\u3149"},{"location":"posts/2024-12-12/#_4","text":"\uc2a4\ud0e0\ub4dc \uc5bc\ub860 \ud615\uc2dd\uc758 \uac8c\uc784\uc774 \uc544\ub2c8\ub77c, MIR\uc5d4\uc9c4\uc758 \ubc84\uc804\uc774 \uc5c5\uadf8\ub808\uc774\ub4dc\ub420\ub54c \ub9c8\ub2e4 \uc5d4\uc9c4\uc758 \uc2e0\uae30\ub2a5\uc744 \ubf50\ub0bc \uc218 \uc788\ub294 \ub370\ubaa8 \ucee8\uc149 \uac8c\uc784 \uc774 \ubc29\uc2dd\uc73c\ub85c \ub098\uc624\uc9c0 \uc54a\uc744\uae4c \uc2f6\uc74c. (\uc0ac\uc2e4, Penitence\uc758 \ucee8\uc149\uc744 \ubc84\ub9ac\uae30\uc5d0\ub294 \ub108\ubb34 \uc544\uae5d\uae30\ub3c4 \ud574\uc11c \u3147\u3147;;;) \uc544, \ub048\uae30\uc5c6\ub294 \uac83\ub3c4 \u3147\u3148.... \uadf8\uc5d0 \ub300\ud574\uc11c\ub294 \uc808\ub300 \ud560\ub9d0\uc774 \uc5c6\ub2e4...","title":"\uadfc\ub370 \uacb0\ub860\uc801\uc73c\ub85c, \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uc608\uc815\uc784."},{"location":"posts/2024-12-12/#6","text":"\uccab\uae00\ub85c \ub0b4\uac00 \ub9cc\ub4e0 \uc5d4\uc9c4, MIR\ub97c \uc18c\uac1c\ud588\ub2e4. \uc544\ub9c8, \ub0b4 \uc0dd\uac01\uc5d0 MIR\ub294 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c(\ud604\ub300\uc801\uc778, C++\uc744 \ubc84\ub9ac\uace0 \u314e\u314e) \ub9ac\ub274\uc5bc\ub418\uc9c0 \uc54a\uc744\uae4c! \uc774\uc81c 2025\uc778\ub370, \ub2e4\ub4e4 HNY","title":"6. \ub9c8\ubb34\uc73c\ub9ac"},{"location":"posts/2025-1-22/","text":"\uadf8\ub798\ud53d\uc2a4 API \ub2e4 \uccd0 \uae68\ubd80\uc218\uae30. (OpenGL \ud3b8) \uc2e0\ub144\uc774 \ub418\uace0 \ub098\uc5d0\uac8c\ub294 \ud55c\uac00\uc9c0 \ubaa9\ud45c\uac00 \uc0dd\uacbc\ub2e4. \uc544! \uc62c\ud574 \uc0c1\ubc18\uae30\uc5d0\ub294 \ub300\ud45c\uc801\uc778 \uadf8\ub798\ud53d\uc2a4 API\uc5d0 \ub300\ud55c \ud3ec\ud3f4\uc744 \ub9cc\ub4e4\uc790! \uc74c...\uadf8\ub798\uc11c GPT\ud55c\ud14c \ub09c\uc774\ub3c4 \uc21c\uc11c\ub97c \ubb3c\uc5b4\ubcf4\ub2c8 \uc774\uc0db\uae30. OpenGL -> DX11 -> DX12 -> Vulkan\uc774\ub780\ub2e4. \uadf8\ub798\uc11c, OpenGL\ubd80\ud130 \uc2dc\uc791\ud568. \u3147\u3147 (\ucc38\uace0, \uadf8\ub798\ud53d\uc2a4\ub97c \uc870\uae08\uc774\ub77c\ub3c4 \uc544\ub294 \uc0ac\ub78c\uc774 \ubcf4\uba74 \uc88b\uc740 \uac8c\uc2dc\ubb3c\uc774\ub780\ub2e4.) 1. \ud56d\uc0c1 \ubb58 \ud560\uae4c\ubd80\ud130... Penitence \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud558\uba74\uc11c \ub0b4\uac00 \uc0dd\uac01\ubcf4\ub2e4 \uc7a6\ubc25\uc774\ub780 \uac78 \ub290\uaf08\ub2e4. \uadf8\ub798\uc11c, \uc774\ubc88 \ud504\ub85c\uc81d\ud2b8\ub294 \uad6c\uc870\ub97c \ud06c\uac8c \uc2e0\uacbd\uc4f0\uc9c0 \uc54a\uace0 \uc81c\uc791\ud558\uae30\ub85c \ud568. \uaca8\uc6b8\uc774 \ub418\uba74\uc11c \ud56d\uc0c1 \ub0b4\uac00 \ub4e3\ub294 \uc74c\uc545\uc774 \uc788\ub2e4. \ub2e4\ub978 \uc0ac\ub78c\uc758 \uc74c\uc545\uc774 \uc544\ub2cc \ub0b4 \ub178\ub798\uc778\ub370... \uc81c\ubaa9\uc740 'White Ashes'\uc774\ub2e4. 2021\ub144 \ub9c9\ubc14\uc9c0 \uaca8\uc6b8, \ub2f9\uc2dc \uc2ec\uc801\uc73c\ub85c \ub108\ubb34 \ud798\ub4e4\uc5c8\ub2e4. (\uc774\uc720\ub294 \uc9c0\uae08\ub3c4 \ubaa8\ub974\uaca0\ub2e4.) \uadf8\ub54c \uc0c8\ubcbd\uc5d0 \uc0dd\uac01\ub098\ub294 \uba5c\ub85c\ub514\ub97c \ubc14\ud0d5\uc73c\ub85c 3\uc2dc\uac04\ub3d9\uc548 \uc791\uace1\ud55c \ub178\ub798\uc778\ub370, \ud761\uc5f0\uc790(\ud604\uc7ac\ub294 \uae08\uc5f0 4\uac1c\uc6d4\ucc28)\uc600\ub358 \ub098\ub294 \ubaa8\ub2c8\ud130\ub9c1 \ud558\ub824\uace0(\uc544\uc9c1\ub3c4 \uae30\uc5b5\ub09c\ub2e4.) \uc0c8\ubcbd 4\uc2dc, 1\uce35\uc5d0\uc11c \ub2f4\ubc30 \ubb3c\uace0, \uc5d0\uc5b4\ud31f \uaf42\uace0, \ud558\ub298\uc744 \ubd24\ub294\ub370, \ub208\uc774 \ub0b4\ub838\ub2e4. \ubb18\ud558\uac8c\ub3c4 \uadf8 \uc7a5\uba74\uc774 \ub178\ub798\uc640 \uc798 \ub179\uc544\ub4e4\uc5b4 \uac00\ub294 \uac83\uc774\ub2e4. \ub5a8\uc5b4\uc9c0\ub294 \ub2f4\ubc43\uc7ac\uac00 \ub0b4\ub9ac\ub294 \ub208\uacfc \ud568\uaed8 \uc11e\uc5ec\uc11c...\uc554\ud2bc \uadf8\ub7ac\ub2e4. \uadf8\ub798\uc11c \uc774 \uace1\uc758 \uc81c\ubaa9\uc774 'White Ashes '\uc774\ub2e4. \uadf8\ub0a0 \uc774\ud6c4\ubd80\ud130 \ub208\uc774 \ub0b4\ub9ac\uba74 \ud56d\uc0c1 \uc774 \ub178\ub798\ub97c \ub4e3\ub294\ub2e4. \ub098\uc5d0\uac90 \uce90\ub864\ubcf4\ub2e4 \ub354 \ubb49\ud074 Tlvkf! \uc9c0\uc6d0\uc774\ud615! \uadf8\ub798\uc11c \uc774\uac78\ub85c \ubb58 \ud588\ub2e4\ub294\uac70\uc57c~~! \uc544, \ub108\ubb34 F\uc600\ub358 \uc2dc\uc808 \uc774\uc57c\uae30\ub97c \uc3df\uc544\ub0c8\ub2e4. \uc554\ud2bc \ub09c, \uc774\ubc88 \uae30\ud68c\uc5d0 \uc774 \ub178\ub798\uc5d0\uac8c \uc791\uc740 \uc120\ubb3c\uc744 \uc8fc\ub9ac\ub77c \ub2e4\uc9d0\ud588\ub2e4. 3\ub144\ub9cc\uc758 \ubba4\uc9c1\ube44\ub514\uc624 \uc774\uac8c \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \uc2dc\uc791\uc774\uc5c8\ub2e4. 2. \ucee8\uc149? \uc74c...\uc0ac\uc2e4 \uac00\uc7a5 \uba3c\uc800 \ub5a0\uc624\ub978\uac74 \uc774 \ub178\ub798\uc758 \ubba4\ube44\ub2e4. \uac80\uc815\uce58\ub9c8 - Everything \uc774 \ubba4\ube44\uc5d0\uc11c \ub0b4\uac00 \uac00\uc7a5 \uc88b\uc544\ud558\ub294 \uc7a5\uba74\uc740 \uc218\ub9ce\uc740 \ubd89\uc740 \uc758\uc790\uac00 \ub0a0\uc544\uac00\ub294 \uc7a5\uba74\uc778\ub370, \uc774\uac78 \uc624\ub9c8\uc96c\ud558\uace0 \uc2f6\uc5c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 \uac80\uc740 \ud654\uba74\uc5d0 \ud558\uc580 \ud050\ube0c\uac00 \ub300\ucda9 \ub5a8\uc5b4\uc9c0\ub294... \uadf8\ub7f0 \ub290\ub08c \ub9cc \uc0dd\uac01\ud558\uba70, \uc2dc\uc791\ud588\ub2e4. 3. \uac1c\ubc1c \uc2dc\uc791! \uc774\uc804 \ud504\ub85c\uc81d\ud2b8, Penitence\uc640 \ub2ec\ub9ac, \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud504\ub85c\uc81d\ud2b8 \ub0b4\ubd80\uc5d0 \uc2ec\ub294 \uac83\uc744 \ucd5c\ub300\ud55c \ud53c\ud558\ub824 \ub178\ub825\ud588\ub2e4. OpenGL\uc740 \uc774\ubbf8 \ucd5c\uc2e0 \ub9e5\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc5b4, Pass. brew\ub85c glfw, glm\uc744 \uc124\uce58\ud558\uace0...CMakeList\ub3c4 \uc124\uc815\ud558\uace0...\ud558\uba74? \uc774\uc81c \uc138\ud305 \ub05d! \uac1c\ubc1c \uc2dc\uc791\uc774\ub838\ub2e4. 4. \ub80c\ub354\ub9c1 \ud30c\uc774\ud504\ub77c\uc778? GLSL? \uac1c\ub150\ubd80\ud130 \ud655\uc2e4\ud788 \uc7a1\uace0 \uac00\uc790. Rendering Pipeline\uc740, \ub370\uc774\ud130\uac00 \ub514\uc2a4\ud50c\ub808\uc774\uc5d0 \ud45c\ud604\ub418\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \ub73b\ud55c\ub2e4. \uac01 \ub2e8\uacc4\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\uace0, \uacc4\uc0b0\ud558\uace0, \uac00\uacf5\ud558\uc5ec \ub2e4\uc74c \ub2e8\uacc4\ub85c \ub118\uaca8\uc8fc\ub294, \uc77c\uc885\uc758 \ud30c\uc774\ud504\ub77c\uc778 \uc9c1\ub82c \uad6c\uc870\ub85c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub7ec\ub2c8\uae4c, \uac01 \ud53d\uc140\ub9c8\ub2e4 \uc774\ub7f0 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub3cc\ub824\uc57c\ud55c\ub2e4. \uadfc\ub370, \ud639\uc2dc \ud604\ub300 \ubaa8\ub2c8\ud130 \ud53d\uc140\uc758 \uac1c\uc218\uac00 \uba87\uac1c\uc778\uc9c0 \uc544\ub294\uac00? HD \uae30\uc900, 1920 x 1080 \uac1c\uc758 \ud53d\uc140\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4! CPU\ub77c\uba74, \uc774\ub7f0 \uc5f0\uc0b0\uc744 \ud560\ub54c, \"\uc544\uc559! \uc8fc\uc778\ub2d8! \ub108\ubb34 \ud798\ub4e4\uc5b4\uc694!! \u315c\u315c\" \ub77c \ud558\uaca0\uc9c0\ub9cc, GPU\ub294 \ub2e4\ub974\ub2e4. GPU\ub294 \uac04\ub2e8\ud55c \ubcd1\ub82c \uc5f0\uc0b0(\ud589\ub82c\uacf1\uacfc \uac19\uc740...)\uc5d0 \ud2b9\ud654\ub41c \ud558\ub4dc\uc6e8\uc5b4\uc774\uae30\uc5d0, CPU\ubcf4\ub2e4 \ub354 \ube60\ub974\uac8c \ud53d\uc140\uc758 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub3cc\ub9b4 \uc218 \uc788\ub2e4. \uc74c...\ud558\ub4dc\uc6e8\uc5b4\uac00 \uc788\ub2e4\uba74 \ud544\ud788 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub3c4 \uc874\uc7ac\ud574\uc57c \ud55c\ub2e4. GPU \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub294 \ubb34\uc5c7\uc73c\ub85c \ud504\ub85c\uadf8\ub798\ubc0d \ud558\uc9c0? C++? \uc790\ubc14? \uc790, \uc6b0\ub9ac\ub294 OpenGL\uc744 \uc0ac\uc6a9\uc911\uc774\ub2e4. GLSL(Graphics Library Shader Language)\uc740 OpenGL \ud30c\uc774\ud504\ub77c\uc778\uc5d0 \ud2b9\ud654\ub41c GPU \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc774\ub2e4. OpenGL\uc758 \ud30c\uc774\ud504\ub77c\uc778\uc740 \ub2e4\ub978 \ube14\ub85c\uadf8, \uae00\uc744 \ucc38\uc870\ud558\uba74 \ub354 \uc88b\uc740 \uac8c\uc2dc\ubb3c\uc774 \ub9ce\uc73c\ub2c8, \uc0dd\ub7b5\ud55c\ub2e4. \ub300\uc2e0, \ub098\ub294 \ud30c\uc774\ud504\ub77c\uc778\uacfc glsl\uc758 \uc5f0\uad00\uc131\uc5d0 \uc880 \ub354 \ubb34\uac8c\ub97c \uc2e4\uc744 \uac83\uc774\ub2e4. GLSL\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc740 \ub2e4\uc74c \ub450\uac1c\uc774\ub2e4. Vertex Shader Fragment Shader \ubc84\ud14d\uc2a4 \uc250\uc774\ub354\ub294, \uae30\ud558\uc758 \ub370\uc774\ud130\uc5d0 \uad00\ud55c \ud504\ub85c\uadf8\ub7a8\uc774\ub2e4. \ubb50...\uae30\ud558\uc758 \uc704\uce58\ub098, \uc0c9\uacfc \uac19\uc740 \uc815\ubcf4\ub4e4? \ud504\ub85c\uadf8\ub798\ubc0d \ub2e8\uacc4\uc5d0\uc11c attribute\ub85c \ub118\uaca8\uc904 \uc218 \uc788\ub2e4. \uc544\ub798\ub294, \uc2e4\uc81c \ub0b4\uac00 \uc0ac\uc6a9\ud55c \ucf54\ub4dc. // Vertex GLSL #version 330 core layout(location = 0) in vec3 att_pos; layout(location = 1) in vec3 att_norm; layout(location = 2) in vec3 att_color; out vec3 in_pos; out vec3 in_norm; out vec3 in_color; // MVP uniform mat4 model; uniform mat4 view; uniform mat4 proj; void main() { in_pos = vec3(model * vec4(att_pos, 1.0)); in_norm = normalize(mat3(transpose(inverse(model))) * att_norm); in_color = att_color; gl_Position = proj * view * model * vec4(in_pos, 1.0); } \uc5c4...\uc6b0\uc120 in\uacfc out\ud544\ub4dc\ub97c \uc0dd\uac01\ud574\ubcfc \ud544\uc694\uac00 \uc788\uc74c. in\uc740 \ub9d0 \uadf8\ub300\ub85c, \uc250\uc774\ub354\uc5d0 \uc785\ub825\ub41c \ub370\uc774\ud130, out\uc740 \uc5b4\ub518\uac00 \ub85c \ub098\uac00\ub294 \ub370\uc774\ud130\uc784. in\uc73c\ub85c \ub4e4\uc5b4\uc628 \ub370\uc774\ud130\ub97c \ubc14\ud0d5\uc73c\ub85c \uac00\uacf5\ub41c \ub370\uc774\ud130\uc778, out\ub4e4\uc740 \ub2e4\uc2dc \ud504\ub798\uadf8\uba3c\ud2b8 \uc250\uc774\ub354\ub85c \ub4e4\uc5b4\uac10. \uc720\ub2c8\ud3fc\uc740 \uadf8\ub0e5, \ubcc0\ud658\uc744 \uc704\ud55c \uc138\ud305? \uc774\ub77c\uace0 \ubcf4\uba74 \uc26c\uc6c0. gl_Position\uc5d0 \uc815\uc810 \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub418\ub294\ub370 \uc774\ub54c, MVP \ud589\ub82c\uc744 \ud1b5\ud574 \uc88c\ud45c\ubcc0\ud658\ub428. \uc790, \uadf8\ub7ec\uba74 \ud504\ub798\uadf8\uba3c\ud2b8 \uc250\uc774\ub354\ub294 \ubb58\ud558\ub294 \ub188\uc774\ub0d0? \ud504\ub798\uadf8\uba3c\ud2b8 \uc250\uc774\ub354\ub294 \uc2e4\uc81c \ubcf4\uc5ec\uc9c0\ub294 \ub370\uc774\ud130\ub97c \uacb0\uc815\ud558\ub294 \uc5ed\ud560\uc744 \ud568. \uc0c9\uc5d0 \uad00\ud55c \uac83\ub4e4\uc740 \uc5ec\uae30\uc11c \ucc98\ub9ac\ub428. \uc5ec\uae30\ub3c4 \ub0b4 \ucf54\ub4dc\ub97c \ubcf4\uaca0\uc74c! #version 330 core in vec3 in_pos; in vec3 in_norm; in vec3 in_color; out vec4 frag_color; uniform vec3 light_pos; uniform vec3 light_color; uniform vec3 view_pos; uniform bool enabled; void main() { vec3 amb = 0.1 * light_color; vec3 light_dir = normalize(light_pos - in_pos); float _diff = max(0.0, dot(in_norm, light_dir)); vec3 diff = _diff * light_color; vec3 view_dir = normalize(view_pos - in_pos); vec3 reflect_dir = reflect(-light_dir, in_norm); float _spec = pow(max(dot(view_dir, reflect_dir), 0.0), 0.5); vec3 spec = 5.0 * _spec * light_color; vec3 extra = vec3(0.0, 0.0, 0.0); if (enabled) extra = in_norm; vec3 result = (amb + diff + spec + extra) * in_color; frag_color = vec4(result, 1.0); } \uc74c...\uc870\uae08 \ubcf5\uc7a1\ud558\uc9c0\ub9cc, \ud558\ub098\uc529 \ub72f\uc5b4\ubcf4\uac8c\ub738. \uc704 \ucf54\ub4dc\ub97c \uc694\uc57d\ud558\uba74, \ub4e4\uc5b4\uc628 \uc815\ubcf4\uc5d0 \ub300\ud574 phong \uceec\ub7ec \ube14\ub80c\ub529\ud558\ub294 \uacfc\uc815\uc784. (Phong \uceec\ub7ec \uc124\uba85) \uac70\uae30\ub2e4\uac00 \ud2b9\uc815 \ucee4\uba58\ub4dc(enabled)\ub97c \uc785\ub825\ud558\uba74, extra\ubc14\ub01c. \uc774\uac83\uc758 \uc5ed\ud560\uc740, \ub79c\ub364 \uc0dd\uc131\ub41c \ud050\ube0c\uc758 \uc0c9 \ub9c8\uc800\ub3c4 \ub79c\ub364\uc73c\ub85c \ubc14\uafb8\uae30 \uc704\ud55c \uac83\uc784. \uc74c? \uadf8\uac8c \ubb34\uc2a8 \uc18c\ub9ac\ub0d0? \ud558\uba74. \ub79c\ub364\uc73c\ub85c \uc0dd\uc131\ub41c \ud050\ube0c\ub4e4\uc740 \uc704\uce58, \ud68c\uc804\uc774 \ub2e4\ub974\uae30\uc5d0 \uac70\uc758 \uc804\ubd80 \ub2e4\ub97c \uac83 \uc774\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \ubca1\ud130\ub97c \uc0c9\uac12\uc73c\ub85c \ub9e4\ud551\ud558\uba74? \uc804\ubd80 \ub79c\ub364\ud55c \uceec\ub7ec\uac00 \uc785\ud600\uc9c4 \uac83\ucc98\ub7fc \ubcf4\uc774\ub294 \uac83! \uadf8\ub807\uac8c \uac00\uacf5\ub41c \uc0c9\uc740, frag_color\uc5d0 \uc800\uc7a5\ub418\uc5b4 \ub514\uc2a4\ud50c\ub808\uc774\ub41c\ub2e4! \uc774\ub807\ub4ef OpenGL\uc758 \uc250\uc774\ub354 \uad6c\uc870\ub97c \uc9c4\uc9dc \uac89\ub9cc \ucc0d\uba39\ud574\ubcf4\uc558\ub2e4. \uc774\uc81c \ub2e4\uc74c \ud1a0\ud53d\uc740? 5. \ud3ec\uc2a4\ud2b8 \ud504\ub85c\uc138\uc2f1(Post-processing) \ub0b4\uac00 Everything \ubba4\ube44\uc5d0\uc11c \uac00\uc7a5 \uc88b\uc544\ud558\ub294\uac8c, \ub798\ud2b8\ub85c\ud55c \uac10\uc131\uc784. \uadf8\ub9ac\uace0 \uc0ac\uc2e4, \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \ud575\uc2ec \uc774\uae30\ub3c4 \ud568. \uc774\ub7ec\ud55c \ud6a8\uacfc\ub97c \uadf8\ub798\ud53d\uc2a4 \ud6c4 \ucc98\ub9ac\ub77c\uace0 \ud568. \uc774\uac78 \uc601\uc5b4\ub85c \ud558\uba74, \ubb54\uc9c0 \uc54c\uaca0\uc838\uc789? \uc790, \uadf8\ub7fc \ud3ec\uc2a4\ud2b8 \ud504\ub85c\uc138\uc2f1\uc744 \uc5b5\ub355\uacc4 \uad6c\ud604\ud560\uac70\ub0d0? \uadf8\uac83\ub3c4 \uc0ac\uc2e4 glsl\ub85c \uc791\uc131\ud558\ub294 \uac83\uc784. #version 330 core layout(location = 0) in vec2 att_pos; layout(location = 1) in vec2 att_tex_coords; out vec2 in_tex_coords; void main() { in_tex_coords = att_tex_coords; gl_Position = vec4(att_pos, 0.0, 1.0); } \uc0ac\uc2e4, \ubc84\ud14d\uc2a4 \uc250\uc774\ub354\ub294 \ubcc4 \uc5ed\ud560\uc744 \uc548\ud568. \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\uc5d0\uc11c \uc785\ub825\ud55c \uc815\uc810\uc744 \ud504\ub798\uadf8\uba3c\ud2b8\ub85c \uc62e\uaca8\uc8fc\ub294 \uc5ed\ud560\uc784. #version 330 core in vec2 in_tex_coords; out vec4 frag_color; uniform sampler2D screen_tex; uniform vec2 screen_res; float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453); } void main() { vec3 color = texture(screen_tex, in_tex_coords).rgb; float line_thick = 1.0; float intensity = 0.2; float y = in_tex_coords.y * screen_res.y; if (mod(y, 2.0) < line_thick) color *= (1.0 - intensity); float noise_strength = 0.05; float noise = rand(in_tex_coords) * noise_strength; color += vec3(noise); frag_color = vec4(color, 1.0); } \ucf54\ub4dc\ub294 \ub2e8\uc21c\ud568. \uc2a4\uce94\ub77c\uc778 - \uc608\uc804 CRT \ubaa8\ub2c8\ud130\uc5d0 \uc798 \ubcf4\uba74, \uac00\ub85c\uc904? \uc544\uc9c0\ub791\uc774? \uac19\uc740 \uadf8\ub7f0 \uc120\uc774 \uc788\ub294\ub370, \uadf8\uac70 \uad6c\ud604\ud568. \ud654\uba74 \uc88c\ud45c y\uac12\uc5d0 \ub530\ub77c, (\uc5ec\uae30\uc11c\ub294 \uc9dd\uc218\ub77c\uc778) \uc0c9\uc758 \uac15\ub3c4\ub97c \uc870\uc808\ud574\uc11c \ube44\uc2b7\ud55c \ud6a8\uacfc\ub97c \uad6c\ud604. \ud544\ub984 \uadf8\ub808\uc778(\ub178\uc774\uc988) \ud6a8\uacfc - \uc774\uac74 \uadf8\ub0e5 \uc720\uba85\ud55c \ub79c\ub364 \uc0ac\uc778 \ub178\uc774\uc988 \ud568\uc218\ub85c \ub79c\ub364 \uc88c\ud45c \ud53d\uc140 \uc0c9\uc744 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc784. \uc74c...\uc0ac\uc2e4 \ubcc4\uac70 \uc5c6\uc74c. \u3139\u3147 \ubcc4\uac70 \uc5c6\uc74c \u315c\u315c 6. \uacfc\uc815\ubcf4\ub2e8 \uacb0\uacfc\uc9c0 \uc0db\uac38 \uc74c...\uadf8\ub807\uac8c \ub9cc\ub4e4\uc5b4\uc9c4 \ub0b4 \ubba4\ube44\ub97c \ubcf4\uc5ec\uc8fc\uaca0\ub2e4\ub780\ub2e4. _Grammer - White ashes (\ub313\uae00 \ub9ce\uc774 \ub2ec\uc544\uc8fc\uc154\uc694\uc789~) \uc544\ub2c8, \uc0dd\uac01\ubcf4\ub2e4 \uc5c4\uccad\ub09c \uacb0\uacfc\ubb3c\uc774 \ub098\uc628 \uac83 \uac19\ub2e4. \uc55e\ub4a4 \uc790\ub974\uae30, \ud06c\uae30 \uc870\uc815 \uc81c\uc678\ud55c, \ucef7 \ud3b8\uc9d1\uc5c6\ub294 \uc6d0 \ud14c\uc774\ud06c \uc601\uc0c1\uc774\ub2e4. \ube44\ud558\uc778\ub4dc \ucef7. \uc0ac\uc2e4, \uc774 \ubaa8\ub4e0\uac78 \ub179\ud654\ud55c \ub514\ubc14\uc774\uc2a4\uac00 MacBook(2017) \uc774\ub2e4. \uc774\uac8c \uac1c\uca4c\ub294 \uc0ac\uc2e4\uc778\uac8c, \uc601\uc0c1\uc744 \ubcf4\uba74 \ub04a\uae40\uc774 \uc5c6\ub2e4! \ubd84\uba85, OBS\ub85c \ub179\ud654\ub3c4 \ud588\ub294\ub370...\uc5b4\ub5bb\uac8c \ub41c\uac78\uae4c? \ub80c\ub354\ub9c1 \ucd5c\uc801\ud654????!?? \ub294 \uc544\ub2c8\uace0 \uadf8\ub0e5 VSCode\ub97c \ub044\uace0 \ud130\ubbf8\ub110\ub85c \uc2e4\ud589\uc2dc\ucf30\ub354\ub2c8... \uc798 \uc2e4\ud589\ub410\ub2e4. \u314e 7. \ub9c8\ubb34\uc73c\ub9ac \uc774\ubc88 \ud3ec\uc2a4\ud2b8\ub97c \uc2dc\uc791\uc73c\ub85c \ub2e4\uc74c 3\uac1c\uc758 \ud3ec\uc2a4\ud2b8\ub294 \uc804\ubd80 \uadf8\ub798\ud53d\uc2a4 API\ub4e4\uc744 \ub2e4\ub8f0 \uc608\uc815\uc774\ub2e4. \ub9ce\uc740 \uae30\ub300 \ubd80\ud0c1 \u3134\u3134\u314e\u314e","title":"White Ashes"},{"location":"posts/2025-1-22/#api-opengl","text":"\uc2e0\ub144\uc774 \ub418\uace0 \ub098\uc5d0\uac8c\ub294 \ud55c\uac00\uc9c0 \ubaa9\ud45c\uac00 \uc0dd\uacbc\ub2e4.","title":"\uadf8\ub798\ud53d\uc2a4 API \ub2e4 \uccd0 \uae68\ubd80\uc218\uae30. (OpenGL \ud3b8)"},{"location":"posts/2025-1-22/#api","text":"\uc74c...\uadf8\ub798\uc11c GPT\ud55c\ud14c \ub09c\uc774\ub3c4 \uc21c\uc11c\ub97c \ubb3c\uc5b4\ubcf4\ub2c8 \uc774\uc0db\uae30. OpenGL -> DX11 -> DX12 -> Vulkan\uc774\ub780\ub2e4. \uadf8\ub798\uc11c, OpenGL\ubd80\ud130 \uc2dc\uc791\ud568. \u3147\u3147 (\ucc38\uace0, \uadf8\ub798\ud53d\uc2a4\ub97c \uc870\uae08\uc774\ub77c\ub3c4 \uc544\ub294 \uc0ac\ub78c\uc774 \ubcf4\uba74 \uc88b\uc740 \uac8c\uc2dc\ubb3c\uc774\ub780\ub2e4.)","title":"\uc544! \uc62c\ud574 \uc0c1\ubc18\uae30\uc5d0\ub294 \ub300\ud45c\uc801\uc778 \uadf8\ub798\ud53d\uc2a4 API\uc5d0 \ub300\ud55c \ud3ec\ud3f4\uc744 \ub9cc\ub4e4\uc790!"},{"location":"posts/2025-1-22/#1","text":"Penitence \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud558\uba74\uc11c \ub0b4\uac00 \uc0dd\uac01\ubcf4\ub2e4 \uc7a6\ubc25\uc774\ub780 \uac78 \ub290\uaf08\ub2e4. \uadf8\ub798\uc11c, \uc774\ubc88 \ud504\ub85c\uc81d\ud2b8\ub294 \uad6c\uc870\ub97c \ud06c\uac8c \uc2e0\uacbd\uc4f0\uc9c0 \uc54a\uace0 \uc81c\uc791\ud558\uae30\ub85c \ud568. \uaca8\uc6b8\uc774 \ub418\uba74\uc11c \ud56d\uc0c1 \ub0b4\uac00 \ub4e3\ub294 \uc74c\uc545\uc774 \uc788\ub2e4. \ub2e4\ub978 \uc0ac\ub78c\uc758 \uc74c\uc545\uc774 \uc544\ub2cc \ub0b4 \ub178\ub798\uc778\ub370... \uc81c\ubaa9\uc740 'White Ashes'\uc774\ub2e4. 2021\ub144 \ub9c9\ubc14\uc9c0 \uaca8\uc6b8, \ub2f9\uc2dc \uc2ec\uc801\uc73c\ub85c \ub108\ubb34 \ud798\ub4e4\uc5c8\ub2e4. (\uc774\uc720\ub294 \uc9c0\uae08\ub3c4 \ubaa8\ub974\uaca0\ub2e4.) \uadf8\ub54c \uc0c8\ubcbd\uc5d0 \uc0dd\uac01\ub098\ub294 \uba5c\ub85c\ub514\ub97c \ubc14\ud0d5\uc73c\ub85c 3\uc2dc\uac04\ub3d9\uc548 \uc791\uace1\ud55c \ub178\ub798\uc778\ub370, \ud761\uc5f0\uc790(\ud604\uc7ac\ub294 \uae08\uc5f0 4\uac1c\uc6d4\ucc28)\uc600\ub358 \ub098\ub294 \ubaa8\ub2c8\ud130\ub9c1 \ud558\ub824\uace0(\uc544\uc9c1\ub3c4 \uae30\uc5b5\ub09c\ub2e4.) \uc0c8\ubcbd 4\uc2dc, 1\uce35\uc5d0\uc11c \ub2f4\ubc30 \ubb3c\uace0, \uc5d0\uc5b4\ud31f \uaf42\uace0, \ud558\ub298\uc744 \ubd24\ub294\ub370, \ub208\uc774 \ub0b4\ub838\ub2e4. \ubb18\ud558\uac8c\ub3c4 \uadf8 \uc7a5\uba74\uc774 \ub178\ub798\uc640 \uc798 \ub179\uc544\ub4e4\uc5b4 \uac00\ub294 \uac83\uc774\ub2e4. \ub5a8\uc5b4\uc9c0\ub294 \ub2f4\ubc43\uc7ac\uac00 \ub0b4\ub9ac\ub294 \ub208\uacfc \ud568\uaed8 \uc11e\uc5ec\uc11c...\uc554\ud2bc \uadf8\ub7ac\ub2e4. \uadf8\ub798\uc11c \uc774 \uace1\uc758 \uc81c\ubaa9\uc774 'White Ashes '\uc774\ub2e4. \uadf8\ub0a0 \uc774\ud6c4\ubd80\ud130 \ub208\uc774 \ub0b4\ub9ac\uba74 \ud56d\uc0c1 \uc774 \ub178\ub798\ub97c \ub4e3\ub294\ub2e4. \ub098\uc5d0\uac90 \uce90\ub864\ubcf4\ub2e4 \ub354 \ubb49\ud074","title":"1. \ud56d\uc0c1 \ubb58 \ud560\uae4c\ubd80\ud130..."},{"location":"posts/2025-1-22/#tlvkf","text":"\uc544, \ub108\ubb34 F\uc600\ub358 \uc2dc\uc808 \uc774\uc57c\uae30\ub97c \uc3df\uc544\ub0c8\ub2e4. \uc554\ud2bc \ub09c, \uc774\ubc88 \uae30\ud68c\uc5d0 \uc774 \ub178\ub798\uc5d0\uac8c \uc791\uc740 \uc120\ubb3c\uc744 \uc8fc\ub9ac\ub77c \ub2e4\uc9d0\ud588\ub2e4.","title":"Tlvkf! \uc9c0\uc6d0\uc774\ud615! \uadf8\ub798\uc11c \uc774\uac78\ub85c \ubb58 \ud588\ub2e4\ub294\uac70\uc57c~~!"},{"location":"posts/2025-1-22/#3","text":"\uc774\uac8c \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \uc2dc\uc791\uc774\uc5c8\ub2e4.","title":"3\ub144\ub9cc\uc758 \ubba4\uc9c1\ube44\ub514\uc624"},{"location":"posts/2025-1-22/#2","text":"\uc74c...\uc0ac\uc2e4 \uac00\uc7a5 \uba3c\uc800 \ub5a0\uc624\ub978\uac74 \uc774 \ub178\ub798\uc758 \ubba4\ube44\ub2e4. \uac80\uc815\uce58\ub9c8 - Everything \uc774 \ubba4\ube44\uc5d0\uc11c \ub0b4\uac00 \uac00\uc7a5 \uc88b\uc544\ud558\ub294 \uc7a5\uba74\uc740 \uc218\ub9ce\uc740 \ubd89\uc740 \uc758\uc790\uac00 \ub0a0\uc544\uac00\ub294 \uc7a5\uba74\uc778\ub370, \uc774\uac78 \uc624\ub9c8\uc96c\ud558\uace0 \uc2f6\uc5c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 \uac80\uc740 \ud654\uba74\uc5d0 \ud558\uc580 \ud050\ube0c\uac00 \ub300\ucda9 \ub5a8\uc5b4\uc9c0\ub294... \uadf8\ub7f0 \ub290\ub08c \ub9cc \uc0dd\uac01\ud558\uba70, \uc2dc\uc791\ud588\ub2e4.","title":"2. \ucee8\uc149?"},{"location":"posts/2025-1-22/#3_1","text":"\uc774\uc804 \ud504\ub85c\uc81d\ud2b8, Penitence\uc640 \ub2ec\ub9ac, \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud504\ub85c\uc81d\ud2b8 \ub0b4\ubd80\uc5d0 \uc2ec\ub294 \uac83\uc744 \ucd5c\ub300\ud55c \ud53c\ud558\ub824 \ub178\ub825\ud588\ub2e4. OpenGL\uc740 \uc774\ubbf8 \ucd5c\uc2e0 \ub9e5\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc5b4, Pass. brew\ub85c glfw, glm\uc744 \uc124\uce58\ud558\uace0...CMakeList\ub3c4 \uc124\uc815\ud558\uace0...\ud558\uba74? \uc774\uc81c \uc138\ud305 \ub05d! \uac1c\ubc1c \uc2dc\uc791\uc774\ub838\ub2e4.","title":"3. \uac1c\ubc1c \uc2dc\uc791!"},{"location":"posts/2025-1-22/#4-glsl","text":"\uac1c\ub150\ubd80\ud130 \ud655\uc2e4\ud788 \uc7a1\uace0 \uac00\uc790.","title":"4. \ub80c\ub354\ub9c1 \ud30c\uc774\ud504\ub77c\uc778? GLSL?"},{"location":"posts/2025-1-22/#rendering-pipeline","text":"\uac01 \ub2e8\uacc4\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\uace0, \uacc4\uc0b0\ud558\uace0, \uac00\uacf5\ud558\uc5ec \ub2e4\uc74c \ub2e8\uacc4\ub85c \ub118\uaca8\uc8fc\ub294, \uc77c\uc885\uc758 \ud30c\uc774\ud504\ub77c\uc778 \uc9c1\ub82c \uad6c\uc870\ub85c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub7ec\ub2c8\uae4c, \uac01 \ud53d\uc140\ub9c8\ub2e4 \uc774\ub7f0 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub3cc\ub824\uc57c\ud55c\ub2e4. \uadfc\ub370, \ud639\uc2dc \ud604\ub300 \ubaa8\ub2c8\ud130 \ud53d\uc140\uc758 \uac1c\uc218\uac00 \uba87\uac1c\uc778\uc9c0 \uc544\ub294\uac00? HD \uae30\uc900, 1920 x 1080 \uac1c\uc758 \ud53d\uc140\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4! CPU\ub77c\uba74, \uc774\ub7f0 \uc5f0\uc0b0\uc744 \ud560\ub54c, \"\uc544\uc559! \uc8fc\uc778\ub2d8! \ub108\ubb34 \ud798\ub4e4\uc5b4\uc694!! \u315c\u315c\" \ub77c \ud558\uaca0\uc9c0\ub9cc, GPU\ub294 \ub2e4\ub974\ub2e4. GPU\ub294 \uac04\ub2e8\ud55c \ubcd1\ub82c \uc5f0\uc0b0(\ud589\ub82c\uacf1\uacfc \uac19\uc740...)\uc5d0 \ud2b9\ud654\ub41c \ud558\ub4dc\uc6e8\uc5b4\uc774\uae30\uc5d0, CPU\ubcf4\ub2e4 \ub354 \ube60\ub974\uac8c \ud53d\uc140\uc758 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub3cc\ub9b4 \uc218 \uc788\ub2e4. \uc74c...\ud558\ub4dc\uc6e8\uc5b4\uac00 \uc788\ub2e4\uba74 \ud544\ud788 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub3c4 \uc874\uc7ac\ud574\uc57c \ud55c\ub2e4. GPU \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub294 \ubb34\uc5c7\uc73c\ub85c \ud504\ub85c\uadf8\ub798\ubc0d \ud558\uc9c0? C++? \uc790\ubc14? \uc790, \uc6b0\ub9ac\ub294 OpenGL\uc744 \uc0ac\uc6a9\uc911\uc774\ub2e4.","title":"Rendering Pipeline\uc740, \ub370\uc774\ud130\uac00 \ub514\uc2a4\ud50c\ub808\uc774\uc5d0 \ud45c\ud604\ub418\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \ub73b\ud55c\ub2e4."},{"location":"posts/2025-1-22/#glslgraphics-library-shader-language-opengl-gpu","text":"OpenGL\uc758 \ud30c\uc774\ud504\ub77c\uc778\uc740 \ub2e4\ub978 \ube14\ub85c\uadf8, \uae00\uc744 \ucc38\uc870\ud558\uba74 \ub354 \uc88b\uc740 \uac8c\uc2dc\ubb3c\uc774 \ub9ce\uc73c\ub2c8, \uc0dd\ub7b5\ud55c\ub2e4. \ub300\uc2e0, \ub098\ub294 \ud30c\uc774\ud504\ub77c\uc778\uacfc glsl\uc758 \uc5f0\uad00\uc131\uc5d0 \uc880 \ub354 \ubb34\uac8c\ub97c \uc2e4\uc744 \uac83\uc774\ub2e4. GLSL\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc740 \ub2e4\uc74c \ub450\uac1c\uc774\ub2e4. Vertex Shader Fragment Shader","title":"GLSL(Graphics Library Shader Language)\uc740 OpenGL \ud30c\uc774\ud504\ub77c\uc778\uc5d0 \ud2b9\ud654\ub41c GPU \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc774\ub2e4."},{"location":"posts/2025-1-22/#_1","text":"\ubb50...\uae30\ud558\uc758 \uc704\uce58\ub098, \uc0c9\uacfc \uac19\uc740 \uc815\ubcf4\ub4e4? \ud504\ub85c\uadf8\ub798\ubc0d \ub2e8\uacc4\uc5d0\uc11c attribute\ub85c \ub118\uaca8\uc904 \uc218 \uc788\ub2e4. \uc544\ub798\ub294, \uc2e4\uc81c \ub0b4\uac00 \uc0ac\uc6a9\ud55c \ucf54\ub4dc. // Vertex GLSL #version 330 core layout(location = 0) in vec3 att_pos; layout(location = 1) in vec3 att_norm; layout(location = 2) in vec3 att_color; out vec3 in_pos; out vec3 in_norm; out vec3 in_color; // MVP uniform mat4 model; uniform mat4 view; uniform mat4 proj; void main() { in_pos = vec3(model * vec4(att_pos, 1.0)); in_norm = normalize(mat3(transpose(inverse(model))) * att_norm); in_color = att_color; gl_Position = proj * view * model * vec4(in_pos, 1.0); } \uc5c4...\uc6b0\uc120 in\uacfc out\ud544\ub4dc\ub97c \uc0dd\uac01\ud574\ubcfc \ud544\uc694\uac00 \uc788\uc74c. in\uc740 \ub9d0 \uadf8\ub300\ub85c, \uc250\uc774\ub354\uc5d0 \uc785\ub825\ub41c \ub370\uc774\ud130, out\uc740 \uc5b4\ub518\uac00 \ub85c \ub098\uac00\ub294 \ub370\uc774\ud130\uc784. in\uc73c\ub85c \ub4e4\uc5b4\uc628 \ub370\uc774\ud130\ub97c \ubc14\ud0d5\uc73c\ub85c \uac00\uacf5\ub41c \ub370\uc774\ud130\uc778, out\ub4e4\uc740 \ub2e4\uc2dc \ud504\ub798\uadf8\uba3c\ud2b8 \uc250\uc774\ub354\ub85c \ub4e4\uc5b4\uac10. \uc720\ub2c8\ud3fc\uc740 \uadf8\ub0e5, \ubcc0\ud658\uc744 \uc704\ud55c \uc138\ud305? \uc774\ub77c\uace0 \ubcf4\uba74 \uc26c\uc6c0. gl_Position\uc5d0 \uc815\uc810 \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub418\ub294\ub370 \uc774\ub54c, MVP \ud589\ub82c\uc744 \ud1b5\ud574 \uc88c\ud45c\ubcc0\ud658\ub428. \uc790, \uadf8\ub7ec\uba74 \ud504\ub798\uadf8\uba3c\ud2b8 \uc250\uc774\ub354\ub294 \ubb58\ud558\ub294 \ub188\uc774\ub0d0?","title":"\ubc84\ud14d\uc2a4 \uc250\uc774\ub354\ub294, \uae30\ud558\uc758 \ub370\uc774\ud130\uc5d0 \uad00\ud55c \ud504\ub85c\uadf8\ub7a8\uc774\ub2e4."},{"location":"posts/2025-1-22/#_2","text":"\uc0c9\uc5d0 \uad00\ud55c \uac83\ub4e4\uc740 \uc5ec\uae30\uc11c \ucc98\ub9ac\ub428. \uc5ec\uae30\ub3c4 \ub0b4 \ucf54\ub4dc\ub97c \ubcf4\uaca0\uc74c! #version 330 core in vec3 in_pos; in vec3 in_norm; in vec3 in_color; out vec4 frag_color; uniform vec3 light_pos; uniform vec3 light_color; uniform vec3 view_pos; uniform bool enabled; void main() { vec3 amb = 0.1 * light_color; vec3 light_dir = normalize(light_pos - in_pos); float _diff = max(0.0, dot(in_norm, light_dir)); vec3 diff = _diff * light_color; vec3 view_dir = normalize(view_pos - in_pos); vec3 reflect_dir = reflect(-light_dir, in_norm); float _spec = pow(max(dot(view_dir, reflect_dir), 0.0), 0.5); vec3 spec = 5.0 * _spec * light_color; vec3 extra = vec3(0.0, 0.0, 0.0); if (enabled) extra = in_norm; vec3 result = (amb + diff + spec + extra) * in_color; frag_color = vec4(result, 1.0); } \uc74c...\uc870\uae08 \ubcf5\uc7a1\ud558\uc9c0\ub9cc, \ud558\ub098\uc529 \ub72f\uc5b4\ubcf4\uac8c\ub738. \uc704 \ucf54\ub4dc\ub97c \uc694\uc57d\ud558\uba74, \ub4e4\uc5b4\uc628 \uc815\ubcf4\uc5d0 \ub300\ud574 phong \uceec\ub7ec \ube14\ub80c\ub529\ud558\ub294 \uacfc\uc815\uc784. (Phong \uceec\ub7ec \uc124\uba85) \uac70\uae30\ub2e4\uac00 \ud2b9\uc815 \ucee4\uba58\ub4dc(enabled)\ub97c \uc785\ub825\ud558\uba74, extra\ubc14\ub01c. \uc774\uac83\uc758 \uc5ed\ud560\uc740, \ub79c\ub364 \uc0dd\uc131\ub41c \ud050\ube0c\uc758 \uc0c9 \ub9c8\uc800\ub3c4 \ub79c\ub364\uc73c\ub85c \ubc14\uafb8\uae30 \uc704\ud55c \uac83\uc784. \uc74c? \uadf8\uac8c \ubb34\uc2a8 \uc18c\ub9ac\ub0d0? \ud558\uba74. \ub79c\ub364\uc73c\ub85c \uc0dd\uc131\ub41c \ud050\ube0c\ub4e4\uc740 \uc704\uce58, \ud68c\uc804\uc774 \ub2e4\ub974\uae30\uc5d0 \uac70\uc758 \uc804\ubd80 \ub2e4\ub97c \uac83 \uc774\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \ubca1\ud130\ub97c \uc0c9\uac12\uc73c\ub85c \ub9e4\ud551\ud558\uba74? \uc804\ubd80 \ub79c\ub364\ud55c \uceec\ub7ec\uac00 \uc785\ud600\uc9c4 \uac83\ucc98\ub7fc \ubcf4\uc774\ub294 \uac83! \uadf8\ub807\uac8c \uac00\uacf5\ub41c \uc0c9\uc740, frag_color\uc5d0 \uc800\uc7a5\ub418\uc5b4 \ub514\uc2a4\ud50c\ub808\uc774\ub41c\ub2e4! \uc774\ub807\ub4ef OpenGL\uc758 \uc250\uc774\ub354 \uad6c\uc870\ub97c \uc9c4\uc9dc \uac89\ub9cc \ucc0d\uba39\ud574\ubcf4\uc558\ub2e4. \uc774\uc81c \ub2e4\uc74c \ud1a0\ud53d\uc740?","title":"\ud504\ub798\uadf8\uba3c\ud2b8 \uc250\uc774\ub354\ub294 \uc2e4\uc81c \ubcf4\uc5ec\uc9c0\ub294 \ub370\uc774\ud130\ub97c \uacb0\uc815\ud558\ub294 \uc5ed\ud560\uc744 \ud568."},{"location":"posts/2025-1-22/#5-post-processing","text":"\ub0b4\uac00 Everything \ubba4\ube44\uc5d0\uc11c \uac00\uc7a5 \uc88b\uc544\ud558\ub294\uac8c, \ub798\ud2b8\ub85c\ud55c \uac10\uc131\uc784. \uadf8\ub9ac\uace0 \uc0ac\uc2e4, \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \ud575\uc2ec \uc774\uae30\ub3c4 \ud568. \uc774\ub7ec\ud55c \ud6a8\uacfc\ub97c \uadf8\ub798\ud53d\uc2a4 \ud6c4 \ucc98\ub9ac\ub77c\uace0 \ud568. \uc774\uac78 \uc601\uc5b4\ub85c \ud558\uba74, \ubb54\uc9c0 \uc54c\uaca0\uc838\uc789? \uc790, \uadf8\ub7fc \ud3ec\uc2a4\ud2b8 \ud504\ub85c\uc138\uc2f1\uc744 \uc5b5\ub355\uacc4 \uad6c\ud604\ud560\uac70\ub0d0? \uadf8\uac83\ub3c4 \uc0ac\uc2e4 glsl\ub85c \uc791\uc131\ud558\ub294 \uac83\uc784. #version 330 core layout(location = 0) in vec2 att_pos; layout(location = 1) in vec2 att_tex_coords; out vec2 in_tex_coords; void main() { in_tex_coords = att_tex_coords; gl_Position = vec4(att_pos, 0.0, 1.0); } \uc0ac\uc2e4, \ubc84\ud14d\uc2a4 \uc250\uc774\ub354\ub294 \ubcc4 \uc5ed\ud560\uc744 \uc548\ud568. \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\uc5d0\uc11c \uc785\ub825\ud55c \uc815\uc810\uc744 \ud504\ub798\uadf8\uba3c\ud2b8\ub85c \uc62e\uaca8\uc8fc\ub294 \uc5ed\ud560\uc784. #version 330 core in vec2 in_tex_coords; out vec4 frag_color; uniform sampler2D screen_tex; uniform vec2 screen_res; float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453); } void main() { vec3 color = texture(screen_tex, in_tex_coords).rgb; float line_thick = 1.0; float intensity = 0.2; float y = in_tex_coords.y * screen_res.y; if (mod(y, 2.0) < line_thick) color *= (1.0 - intensity); float noise_strength = 0.05; float noise = rand(in_tex_coords) * noise_strength; color += vec3(noise); frag_color = vec4(color, 1.0); } \ucf54\ub4dc\ub294 \ub2e8\uc21c\ud568. \uc2a4\uce94\ub77c\uc778 - \uc608\uc804 CRT \ubaa8\ub2c8\ud130\uc5d0 \uc798 \ubcf4\uba74, \uac00\ub85c\uc904? \uc544\uc9c0\ub791\uc774? \uac19\uc740 \uadf8\ub7f0 \uc120\uc774 \uc788\ub294\ub370, \uadf8\uac70 \uad6c\ud604\ud568. \ud654\uba74 \uc88c\ud45c y\uac12\uc5d0 \ub530\ub77c, (\uc5ec\uae30\uc11c\ub294 \uc9dd\uc218\ub77c\uc778) \uc0c9\uc758 \uac15\ub3c4\ub97c \uc870\uc808\ud574\uc11c \ube44\uc2b7\ud55c \ud6a8\uacfc\ub97c \uad6c\ud604. \ud544\ub984 \uadf8\ub808\uc778(\ub178\uc774\uc988) \ud6a8\uacfc - \uc774\uac74 \uadf8\ub0e5 \uc720\uba85\ud55c \ub79c\ub364 \uc0ac\uc778 \ub178\uc774\uc988 \ud568\uc218\ub85c \ub79c\ub364 \uc88c\ud45c \ud53d\uc140 \uc0c9\uc744 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc784. \uc74c...\uc0ac\uc2e4 \ubcc4\uac70 \uc5c6\uc74c. \u3139\u3147 \ubcc4\uac70 \uc5c6\uc74c \u315c\u315c","title":"5. \ud3ec\uc2a4\ud2b8 \ud504\ub85c\uc138\uc2f1(Post-processing)"},{"location":"posts/2025-1-22/#6","text":"\uc74c...\uadf8\ub807\uac8c \ub9cc\ub4e4\uc5b4\uc9c4 \ub0b4 \ubba4\ube44\ub97c \ubcf4\uc5ec\uc8fc\uaca0\ub2e4\ub780\ub2e4. _Grammer - White ashes (\ub313\uae00 \ub9ce\uc774 \ub2ec\uc544\uc8fc\uc154\uc694\uc789~) \uc544\ub2c8, \uc0dd\uac01\ubcf4\ub2e4 \uc5c4\uccad\ub09c \uacb0\uacfc\ubb3c\uc774 \ub098\uc628 \uac83 \uac19\ub2e4. \uc55e\ub4a4 \uc790\ub974\uae30, \ud06c\uae30 \uc870\uc815 \uc81c\uc678\ud55c, \ucef7 \ud3b8\uc9d1\uc5c6\ub294 \uc6d0 \ud14c\uc774\ud06c \uc601\uc0c1\uc774\ub2e4.","title":"6. \uacfc\uc815\ubcf4\ub2e8 \uacb0\uacfc\uc9c0 \uc0db\uac38"},{"location":"posts/2025-1-22/#_3","text":"\uc0ac\uc2e4, \uc774 \ubaa8\ub4e0\uac78 \ub179\ud654\ud55c \ub514\ubc14\uc774\uc2a4\uac00 MacBook(2017) \uc774\ub2e4. \uc774\uac8c \uac1c\uca4c\ub294 \uc0ac\uc2e4\uc778\uac8c, \uc601\uc0c1\uc744 \ubcf4\uba74 \ub04a\uae40\uc774 \uc5c6\ub2e4! \ubd84\uba85, OBS\ub85c \ub179\ud654\ub3c4 \ud588\ub294\ub370...\uc5b4\ub5bb\uac8c \ub41c\uac78\uae4c? \ub80c\ub354\ub9c1 \ucd5c\uc801\ud654????!?? \ub294 \uc544\ub2c8\uace0 \uadf8\ub0e5 VSCode\ub97c \ub044\uace0 \ud130\ubbf8\ub110\ub85c \uc2e4\ud589\uc2dc\ucf30\ub354\ub2c8... \uc798 \uc2e4\ud589\ub410\ub2e4. \u314e","title":"\ube44\ud558\uc778\ub4dc \ucef7."},{"location":"posts/2025-1-22/#7","text":"\uc774\ubc88 \ud3ec\uc2a4\ud2b8\ub97c \uc2dc\uc791\uc73c\ub85c \ub2e4\uc74c 3\uac1c\uc758 \ud3ec\uc2a4\ud2b8\ub294 \uc804\ubd80 \uadf8\ub798\ud53d\uc2a4 API\ub4e4\uc744 \ub2e4\ub8f0 \uc608\uc815\uc774\ub2e4. \ub9ce\uc740 \uae30\ub300 \ubd80\ud0c1 \u3134\u3134\u314e\u314e","title":"7. \ub9c8\ubb34\uc73c\ub9ac"}]}